{
  "results": [
    {
      "test": "/IndexedDB/abort-in-initial-upgradeneeded.html",
      "subtests": [
        {
          "name": "Test that an abort in the initial upgradeneeded sets version back to 0",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/bindings-inject-key.html",
      "subtests": [
        {
          "name": "Returning keys to script should bypass prototype setters",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Returning values to script should bypass prototype setters",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Returning values to script should bypass prototype chain",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/clone-before-keypath-eval.html",
      "subtests": [
        {
          "name": "Key generator and key path validity check operates on a clone",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Failing key path validity check operates on a clone",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Index key path evaluations operate on a clone",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "Store and index key path evaluations operate on the same clone",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "Cursor update checks and keypath evaluations operate on a clone",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "ERROR",
      "message": "Test named 'Cursor update checks and keypath evaluations operate on a clone' specified 1 'cleanup' function, and 1 failed."
    },
    {
      "test": "/IndexedDB/close-in-upgradeneeded.html",
      "subtests": [
        {
          "name": "When db.close is called in upgradeneeded, the db is cleaned up on refresh",
          "status": "FAIL",
          "message": "assert_unreached: unexpected open.success event Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/cursor-overloads.htm",
      "subtests": [
        {
          "name": "Validate the overloads of IDBObjectStore.openCursor(), IDBIndex.openCursor() and IDBIndex.openKeyCursor()",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/delete-request-queue.html",
      "subtests": [
        {
          "name": "Deletes are processed in order",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/error-attributes.html",
      "subtests": [
        {
          "name": "IDBRequest and IDBTransaction error properties should be DOMExceptions",
          "status": "FAIL",
          "message": "assert_true: expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/event-dispatch-active-flag.html",
      "subtests": [
        {
          "name": "Transactions are active during success handlers",
          "status": "FAIL",
          "message": "assert_false: Transaction should be inactive in next task expected false got true"
        },
        {
          "name": "Transactions are active during success listeners",
          "status": "FAIL",
          "message": "assert_false: Transaction should be inactive in next task expected false got true"
        },
        {
          "name": "Transactions are active during error handlers",
          "status": "FAIL",
          "message": "assert_false: Transaction should be inactive in next task expected false got true"
        },
        {
          "name": "Transactions are active during error listeners",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/IndexedDB/fire-error-event-exception.html",
      "subtests": [
        {
          "name": "Exception in error event handler on request",
          "status": "FAIL",
          "message": "assert_equals: expected \"AbortError\" but got \"ConstraintError\""
        },
        {
          "name": "Exception in error event handler on request, with preventDefault",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Exception in error event listener on request",
          "status": "FAIL",
          "message": "assert_equals: expected \"AbortError\" but got \"ConstraintError\""
        },
        {
          "name": "Exception in second error event listener on request",
          "status": "FAIL",
          "message": "assert_equals: expected \"AbortError\" but got \"ConstraintError\""
        },
        {
          "name": "Exception in first error event listener on request, transaction active in second",
          "status": "FAIL",
          "message": "assert_equals: expected \"AbortError\" but got \"ConstraintError\""
        },
        {
          "name": "Exception in error event handler on transaction",
          "status": "FAIL",
          "message": "assert_equals: expected \"AbortError\" but got \"ConstraintError\""
        },
        {
          "name": "Exception in error event handler on transaction, with preventDefault",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Exception in error event listener on transaction",
          "status": "FAIL",
          "message": "assert_equals: expected \"AbortError\" but got \"ConstraintError\""
        },
        {
          "name": "Exception in second error event listener on transaction",
          "status": "FAIL",
          "message": "assert_equals: expected \"AbortError\" but got \"ConstraintError\""
        },
        {
          "name": "Exception in first error event listener on transaction, transaction active in second",
          "status": "FAIL",
          "message": "assert_equals: expected \"AbortError\" but got \"ConstraintError\""
        },
        {
          "name": "Exception in error event handler on connection",
          "status": "FAIL",
          "message": "assert_equals: expected \"AbortError\" but got \"ConstraintError\""
        },
        {
          "name": "Exception in error event handler on connection, with preventDefault",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "Exception in error event listener on connection",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "Exception in second error event listener on connection",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "Exception in first error event listener on connection, transaction active in second",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "ERROR",
      "message": "Test named 'Exception in error event listener on connection' specified 1 'cleanup' function, and 1 failed."
    },
    {
      "test": "/IndexedDB/fire-success-event-exception.html",
      "subtests": [
        {
          "name": "Exception in success event handler on request",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Exception in success event listener on request",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Exception in second success event listener on request",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Exception in first success event listener, tx active in second",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/fire-upgradeneeded-event-exception.html",
      "subtests": [
        {
          "name": "Exception in upgradeneeded handler",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Exception in upgradeneeded listener",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Exception in second upgradeneeded listener",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Exception in first upgradeneeded listener, tx active in second",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/historical.html",
      "subtests": [
        {
          "name": "\"errorCode\" should not be supported on IDBRequest.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "\"LOADING\" should not be supported on IDBRequest.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "\"DONE\" should not be supported on IDBRequest.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "\"version\" should not be supported on IDBVersionChangeEvent.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "\"setVersion\" should not be supported on IDBDatabase.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "\"NEXT\" should not be supported on IDBCursor.",
          "status": "FAIL",
          "message": "assert_false: expected false got true"
        },
        {
          "name": "\"NEXT_NO_DUPLICATE\" should not be supported on IDBCursor.",
          "status": "FAIL",
          "message": "assert_false: expected false got true"
        },
        {
          "name": "\"PREV\" should not be supported on IDBCursor.",
          "status": "FAIL",
          "message": "assert_false: expected false got true"
        },
        {
          "name": "\"PREV_NO_DUPLICATE\" should not be supported on IDBCursor.",
          "status": "FAIL",
          "message": "assert_false: expected false got true"
        },
        {
          "name": "\"READ_ONLY\" should not be supported on IDBTransaction.",
          "status": "FAIL",
          "message": "assert_false: expected false got true"
        },
        {
          "name": "\"READ_WRITE\" should not be supported on IDBTransaction.",
          "status": "FAIL",
          "message": "assert_false: expected false got true"
        },
        {
          "name": "\"VERSION_CHANGE\" should not be supported on IDBTransaction.",
          "status": "FAIL",
          "message": "assert_false: expected false got true"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idb-binary-key-detached.htm",
      "subtests": [
        {
          "name": "Detached ArrayBuffer",
          "status": "FAIL",
          "message": "assert_throws: function \"() => { store.put('', buffer); }\" threw object \"DataError\" (\"DataError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Detached TypedArray",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idb-binary-key-roundtrip.htm",
      "subtests": [
        {
          "name": "Binary keys can be supplied using the view type Uint8Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Binary keys can be supplied using the view type Uint8ClampedArray",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Binary keys can be supplied using the view type Int8Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Binary keys can be supplied using the view type Uint16Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Binary keys can be supplied using the view type Int16Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Binary keys can be supplied using the view type Uint32Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Binary keys can be supplied using the view type Int32Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Binary keys can be supplied using the view type Float32Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Binary keys can be supplied using the view type Float64Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "ArrayBuffer can be used to supply a binary key",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "DataView can be used to supply a binary key",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "DataView with explicit offset can be used to supply a binary key",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "DataView with explicit offset and length can be used to supply a binary key",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Uint8Array with explicit offset can be used to supply a binary key",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Uint8Array with explicit offset and length can be used to supply a binary key",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idb_binary_key_conversion.htm",
      "subtests": [
        {
          "name": "Empty ArrayBuffer",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "ArrayBuffer",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "DataView",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "TypedArray(Int8Array)",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Array of TypedArray(Int8Array)",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idb_webworkers.htm",
      "subtests": [
        {
          "name": "IndexedDB inside of a WebWorker ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-advance-continue-async.htm",
      "subtests": [
        {
          "name": "IDBCursor asyncness - advance",
          "status": "FAIL",
          "message": "assert_equals: expected \"data2\" but got \"data\""
        },
        {
          "name": "IDBCursor asyncness - continue",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        },
        {
          "name": "IDBCursor asyncness - fresh advance still async",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "IDBCursor asyncness - fresh continue still async",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "ERROR",
      "message": "Test named 'IDBCursor asyncness - fresh continue still async' specified 1 'cleanup' function, and 1 failed."
    },
    {
      "test": "/IndexedDB/idbcursor-advance-exception-order.html",
      "subtests": [
        {
          "name": "IDBCursor.advance exception order: TypeError vs. TransactionInactiveError",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'openKeyCursor'"
        },
        {
          "name": "IDBCursor.advance exception order: TransactionInactiveError vs. InvalidStateError #1",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'openKeyCursor'"
        },
        {
          "name": "IDBCursor.advance exception order: TransactionInactiveError vs. InvalidStateError #2",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'openKeyCursor'"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-advance-invalid.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - invalid - attempt to call advance twice",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        },
        {
          "name": "IDBCursor.advance() - invalid - pass something other than number",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        },
        {
          "name": "IDBCursor.advance() - invalid - pass null/undefined",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        },
        {
          "name": "IDBCursor.advance() - invalid - missing argument",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        },
        {
          "name": "IDBCursor.advance() - invalid - pass negative numbers",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        },
        {
          "name": "IDBCursor.advance() - invalid - got value not set on exception",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-advance.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - advances",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        },
        {
          "name": "IDBCursor.advance() - advances backwards",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        },
        {
          "name": "IDBCursor.advance() - skip far forward",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "IDBCursor.advance() - within range",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        },
        {
          "name": "IDBCursor.advance() - within single key range",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "IDBCursor.advance() - within single key range, with several results",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "ERROR",
      "message": "Test named 'IDBCursor.advance() - within single key range' specified 1 'cleanup' function, and 1 failed."
    },
    {
      "test": "/IndexedDB/idbcursor-continue-exception-order.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'openKeyCursor'"
        },
        {
          "name": "IDBCursor.continue exception order: TransactionInactiveError vs. InvalidStateError",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'openKeyCursor'"
        },
        {
          "name": "IDBCursor.continue exception order: InvalidStateError vs. DataError",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'openKeyCursor'"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-continue.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - continues",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        },
        {
          "name": "IDBCursor.continue() - with given key",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error Reached unreachable code"
        },
        {
          "name": "IDBCursor.continue() - skip far forward",
          "status": "FAIL",
          "message": "assert_unreached: unexpected error2 Reached unreachable code"
        },
        {
          "name": "IDBCursor.continue() - within range",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "IDBCursor.continue() - within single key range",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "IDBCursor.continue() - within single key range, with several results",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "ERROR",
      "message": "Test named 'IDBCursor.continue() - within single key range, with several results' specified 1 'cleanup' function, and 1 failed."
    },
    {
      "test": "/IndexedDB/idbcursor-continuePrimaryKey-exception-order.htm",
      "subtests": [
        {
          "name": "TransactionInactiveError v.s. InvalidStateError(deleted index)",
          "status": "FAIL",
          "message": "assert_throws: transaction-state check should precede deletion check function \"function () {\n                cursor.continuePrimaryKey(\"A\", 4);\n            }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException TransactionInactiveError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "InvalidStateError(deleted source) v.s. InvalidAccessError(incorrect source)",
          "status": "FAIL",
          "message": "assert_throws: deletion check should precede index source check function \"function () {\n                cursor.continuePrimaryKey(\"A\", 4);\n            }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "InvalidStateError(deleted source) v.s. InvalidAccessError(incorrect direction)",
          "status": "FAIL",
          "message": "assert_throws: deletion check should precede cursor direction check function \"function () {\n              cursor.continuePrimaryKey(\"A\", 4);\n            }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "InvalidAccessError(incorrect direction) v.s. InvalidStateError(iteration complete)",
          "status": "FAIL",
          "message": "assert_throws: direction check should precede got_value_flag check function \"function () {\n                cursor.continuePrimaryKey(\"A\", 4);\n            }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException InvalidAccessError: property \"code\" is equal to undefined, expected 15"
        },
        {
          "name": "InvalidAccessError(incorrect direction) v.s. InvalidStateError(iteration ongoing)",
          "status": "FAIL",
          "message": "assert_throws: direction check should precede iteration ongoing check function \"function () {\n                    cursor.continuePrimaryKey(\"A\", 4);\n                }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException InvalidAccessError: property \"code\" is equal to undefined, expected 15"
        },
        {
          "name": "InvalidAccessError(incorrect source) v.s. InvalidStateError(iteration ongoing)",
          "status": "FAIL",
          "message": "assert_throws: index source check should precede iteration ongoing check function \"function () {\n                    cursor.continuePrimaryKey(\"A\", 4);\n                }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException InvalidAccessError: property \"code\" is equal to undefined, expected 15"
        },
        {
          "name": "InvalidAccessError(incorrect source) v.s. InvalidStateError(iteration complete)",
          "status": "FAIL",
          "message": "assert_throws: index source check should precede got_value_flag check function \"function () {\n                cursor.continuePrimaryKey(\"A\", 4);\n            }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException InvalidAccessError: property \"code\" is equal to undefined, expected 15"
        },
        {
          "name": "InvalidStateError(iteration ongoing) v.s. DataError(unset key)",
          "status": "FAIL",
          "message": "assert_throws: iteration ongoing check should precede unset key check function \"function () {\n                    cursor.continuePrimaryKey(null, 4);\n                }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "InvalidStateError(iteration complete) v.s. DataError(unset key)",
          "status": "FAIL",
          "message": "assert_throws: got_value_flag check should precede unset key check function \"function () {\n                cursor.continuePrimaryKey(null, 4);\n            }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "DataError(unset key)",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "DataError(unset primary key)",
          "status": "FAIL",
          "message": "assert_throws: DataError is expected if primary key is unset. function \"function () {\n                cursor.continuePrimaryKey(\"A\", null);\n            }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "DataError(keys are lower then current one) in 'next' direction",
          "status": "FAIL",
          "message": "assert_throws: DataError is expected if key is lower then current one. function \"function () {\n                cursor.continuePrimaryKey(\"A\", 6);\n            }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "DataError(keys are larger then current one) in 'prev' direction",
          "status": "FAIL",
          "message": "assert_throws: DataError is expected if key is larger then current one. function \"function () {\n                cursor.continuePrimaryKey(\"C\", 6);\n            }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-continuePrimaryKey-exceptions.htm",
      "subtests": [
        {
          "name": "IDBCursor continuePrimaryKey() on object store cursor",
          "status": "FAIL",
          "message": "assert_throws: continuePrimaryKey() should throw if source is not an index function \"function () {\n                cursor.continuePrimaryKey(2, 2);\n            }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" that is not a DOMException InvalidAccessError: property \"code\" is equal to undefined, expected 15"
        },
        {
          "name": "IDBCursor continuePrimaryKey() on \"nextunique\" cursor",
          "status": "FAIL",
          "message": "assert_equals: result should be a cursor expected \"[object IDBCursor]\" but got \"[object Null]\""
        },
        {
          "name": "IDBCursor continuePrimaryKey() on \"prevunique\" cursor",
          "status": "FAIL",
          "message": "assert_equals: result should be a cursor expected \"[object IDBCursor]\" but got \"[object Null]\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-continuePrimaryKey.htm",
      "subtests": [
        {
          "name": "IndexedDB: IDBCursor method continuePrimaryKey()",
          "status": "FAIL",
          "message": "Unable to get property 'key' of undefined or null reference"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-delete-exception-order.htm",
      "subtests": [
        {
          "name": "IDBCursor.delete exception order: TransactionInactiveError vs. ReadOnlyError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor.delete exception order: ReadOnlyError vs. InvalidStateError #1",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor.delete exception order: ReadOnlyError vs. InvalidStateError #2",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'openKeyCursor'"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-direction-index-keyrange.htm",
      "subtests": [
        {
          "name": "IDBCursor direction - index with keyrange - next",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor direction - index with keyrange - prev",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor direction - index with keyrange - nextunique",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor direction - index with keyrange - prevunique",
          "status": "FAIL",
          "message": "assert_unreached: deleteDatabase should succeed Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-direction-index.htm",
      "subtests": [
        {
          "name": "IDBCursor direction - index - next",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor direction - index - prev",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor direction - index - nextunique",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "IDBCursor direction - index - prevunique",
          "status": "FAIL",
          "message": "assert_unreached: deleteDatabase should succeed Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-direction-objectstore-keyrange.htm",
      "subtests": [
        {
          "name": "IDBCursor direction - object store with keyrange - next",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor direction - object store with keyrange - prev",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor direction - object store with keyrange - nextunique",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor direction - object store with keyrange - prevunique",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-direction-objectstore.htm",
      "subtests": [
        {
          "name": "IDBCursor direction - object store - next",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor direction - object store - prev",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor direction - object store - nextunique",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor direction - object store - prevunique",
          "status": "FAIL",
          "message": "assert_unreached: deleteDatabase should succeed Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-direction.htm",
      "subtests": [
        {
          "name": "IDBCursor.direction - undefined",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor.direction - next",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor.direction - prev",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor.direction - nextunique",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBCursor.direction - prevunique",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-key.htm",
      "subtests": [
        {
          "name": "IDBCursor.key - 1",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor.key - key",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor.key - my,key",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-primarykey.htm",
      "subtests": [
        {
          "name": "IDBCursor.primaryKey - 1",
          "status": "FAIL",
          "message": "assert_unreached: unexpected db.error (UnknownError) Reached unreachable code"
        },
        {
          "name": "IDBCursor.primaryKey - key",
          "status": "FAIL",
          "message": "assert_unreached: unexpected db.error (UnknownError) Reached unreachable code"
        },
        {
          "name": "IDBCursor.primaryKey - my,key",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-reused.htm",
      "subtests": [
        {
          "name": "IDBCursor is reused",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-source.htm",
      "subtests": [
        {
          "name": "IDBCursor.source - IDBObjectStore",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor.source - IDBIndex",
          "status": "FAIL",
          "message": "assert_unreached: Transaction got error. UnknownError Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor-update-exception-order.htm",
      "subtests": [
        {
          "name": "IDBCursor.update exception order: TransactionInactiveError vs. ReadOnlyError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor.update exception order: ReadOnlyError vs. InvalidStateError #1",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor.update exception order: ReadOnlyError vs. InvalidStateError #2",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "IDBCursor.update exception order: InvalidStateError vs. DataError",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "ERROR",
      "message": "Test named 'IDBCursor.update exception order: InvalidStateError vs. DataError' specified 1 'cleanup' function, and 1 failed."
    },
    {
      "test": "/IndexedDB/idbcursor_advance_index.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - index - iterate cursor number of times specified by count ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_index2.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - attempt to pass a count parameter that is not a number",
          "status": "FAIL",
          "message": "assert_throws: function \"function () { cursor.advance(document); }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_index3.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - index - attempt to advance backwards",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_index5.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - index - iterate to the next record",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_index6.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - index - throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Calling advance() with count argument 0 should throw TypeError. function \"function () {\n                cursor.advance(0);\n            }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_index7.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - index - throw TransactionInactiveError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_index8.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - index - throw InvalidStateError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_index9.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - index - throw InvalidStateError caused by object store been deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_objectstore.htm",
      "subtests": [
        {
          "name": " IDBCursor.advance() - object store - iterate cursor number of times specified by count ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_objectstore2.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - object store - throw TypeError",
          "status": "FAIL",
          "message": "assert_throws: Calling advance() with count argument 0 should throw TypeError. function \"function () {\n                cursor.advance(0);\n            }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_objectstore3.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - object store - throw TransactionInactiveError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_objectstore4.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - object store - throw InvalidStateError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_advance_objectstore5.htm",
      "subtests": [
        {
          "name": "IDBCursor.advance() - object store - throw InvalidStateError caused by object store been deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_index.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - index - iterate to the next record",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_index2.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - index - attempt to pass a key parameter that is not a valid key",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_index3.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - index - attempt to iterate to the previous record when the direction is set for the next record ",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_index4.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - index - attempt to iterate to the next record when the direction is set for the previous record",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_index5.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - index - iterate using 'prevunique'",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_index6.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - index - iterate using nextunique",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_index7.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - index - throw TransactionInactiveError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_index8.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - index - throw InvalidStateError caused by object store been deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_invalid.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - attempt to call continue two times",
          "status": "FAIL",
          "message": "assert_unreached: unexpected db.error (UnknownError) Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_objectstore.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - object store - iterate to the next record",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_objectstore2.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - object store - attempt to pass a key parameter is not a valid key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_objectstore3.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - object store - attempt to iterate to the previous record when the direction is set for the next record",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_objectstore4.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - object store - attempt to iterate to the next record when the direction is set for the previous record ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_objectstore5.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - object store - throw TransactionInactiveError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_continue_objectstore6.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - object store - throw InvalidStateError caused by object store been deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_delete_index.htm",
      "subtests": [
        {
          "name": "IDBCursor.delete() - index - remove a record from the object store",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_delete_index2.htm",
      "subtests": [
        {
          "name": "IDBCursor.delete() - index - attempt to remove a record in a read-only transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_delete_index3.htm",
      "subtests": [
        {
          "name": "IDBCursor.delete() - index - attempt to remove a record in an inactive transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_delete_index4.htm",
      "subtests": [
        {
          "name": "IDBCursor.delete() - index - throw InvalidStateError caused by object store been deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_delete_index5.htm",
      "subtests": [
        {
          "name": "IDBCursor.delete() - index - throw InvalidStateError when the cursor is being iterated",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                cursor.delete();\n            }\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_delete_objectstore.htm",
      "subtests": [
        {
          "name": "IDBCursor.delete() - object store - remove a record from the object store ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_delete_objectstore2.htm",
      "subtests": [
        {
          "name": "IDBCursor.delete() - object store - attempt to remove a record in a read-only transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_delete_objectstore3.htm",
      "subtests": [
        {
          "name": "IDBCursor.delete() - index - attempt to remove a record in an inactive transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_delete_objectstore4.htm",
      "subtests": [
        {
          "name": "IDBCursor.delete() - object store - throw InvalidStateError caused by object store been deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_delete_objectstore5.htm",
      "subtests": [
        {
          "name": "IDBCursor.delete() - object store - throw InvalidStateError when the cursor is being iterated",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                cursor.delete();\n            }\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_iterating.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - objectstore - delete next element, and iterate to it",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_iterating_index.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - index - delete next element, and iterate to it",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_iterating_index2.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - index - add next element, and iterate to it",
          "status": "FAIL",
          "message": "assert_equals: cursor run count expected 3 but got 0"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_iterating_objectstore.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - objectstore - delete next element, and iterate to it",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_iterating_objectstore2.htm",
      "subtests": [
        {
          "name": "IDBCursor.continue() - objectstore - add next element, and iterate to it",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_index.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - index - modify a record in the object store ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_index2.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - index - attempt to modify a record in a read-only transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_index3.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - index - attempt to modify a record in an inactive transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_index4.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - index - attempt to modify a record when object store been deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_index5.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - index - throw DataCloneError",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                cursor.update(record);\n            }\" threw object \"DataError\" that is not a DOMException DataCloneError: property \"code\" is equal to 0, expected 25"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_index6.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - index - no argument",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_index7.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - index - throw DataError",
          "status": "FAIL",
          "message": "assert_throws: function \"function () { cursor.update(null); }\" threw object \"Error: Invalid argument.\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_index8.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - index - throw InvalidStateError when the cursor is being iterated",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                cursor.update({ pKey: \"primaryKey_0\", iKey: \"indexKey_0_updated\" });\n            }\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_objectstore.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - objectstore - modify a record in the object store ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_objectstore2.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - object store - attempt to modify a record in a read-only transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_objectstore3.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - object store - attempt to modify a record in an inactive transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_objectstore4.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - index - modify a record in the object store",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_objectstore5.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - object store - attempt to  modify a record when object store been deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_objectstore6.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - object store - throw DataCloneError",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                cursor.update(record);\n            }\" threw object \"DataError\" that is not a DOMException DataCloneError: property \"code\" is equal to 0, expected 25"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_objectstore7.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - object store - no argument",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_objectstore8.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - object store - throw DataError",
          "status": "FAIL",
          "message": "assert_throws: function \"function () { cursor.update(null); }\" threw object \"Error: Invalid argument.\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbcursor_update_objectstore9.htm",
      "subtests": [
        {
          "name": "IDBCursor.update() - object store - throw InvalidStateError when the cursor is being iterated",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                cursor.update({ pKey: \"primaryKey_0\", value: \"value_0_updated\" });\n            }\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase-createObjectStore-exception-order.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "FAIL",
          "message": "assert_throws: \"running an upgrade transaction\" check (InvalidStateError) should precede \"not active\" check (TransactionInactiveError) function \"() => { db.createObjectStore('s2'); }\" threw object \"Error: Access is denied.\r\n\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "IDBDatabase.createObjectStore exception order: TransactionInactiveError vs. SyntaxError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede \"valid key path\" check (SyntaxError) function \"() => { db.createObjectStore('s2', {keyPath: '-invalid-'}); }\" threw object \"InvalidStateError\" that is not a DOMException TransactionInactiveError: property \"code\" is equal to 11, expected 0"
        },
        {
          "name": "IDBDatabase.createObjectStore exception order: SyntaxError vs. ConstraintError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase.createObjectStore exception order: ConstraintError vs. InvalidAccessError",
          "status": "FAIL",
          "message": "assert_throws: \"already exists\" check (ConstraintError) should precede \"autoIncrement vs. keyPath\" check (InvalidAccessError) function \"() => {\n      db.createObjectStore('s', {autoIncrement: true, keyPath: ''});\n    }\" threw object \"InvalidAccessError\" that is not a DOMException ConstraintError: property \"code\" is equal to 15, expected 0"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase-deleteObjectStore-exception-order.htm",
      "subtests": [
        {
          "name": "IDBDatabase.deleteObjectStore exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "FAIL",
          "message": "assert_throws: \"running an upgrade transaction\" check (InvalidStateError) should precede \"not active\" check (TransactionInactiveError) function \"() => { db.deleteObjectStore('s'); }\" threw object \"Error: Access is denied.\r\n\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "IDBDatabase.deleteObjectStore exception order: TransactionInactiveError vs. NotFoundError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede \"name in database\" check (NotFoundError) function \"() => { db.deleteObjectStore('nope'); }\" threw object \"InvalidStateError\" that is not a DOMException TransactionInactiveError: property \"code\" is equal to 11, expected 0"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase-transaction-exception-order.html",
      "subtests": [
        {
          "name": "IDBDatabase.transaction exception order: InvalidStateError vs. NotFoundError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase.transaction exception order: InvalidStateError vs. InvalidAccessError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase.transaction exception order: NotFoundError vs. TypeError",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_close.htm",
      "subtests": [
        {
          "name": "IDBDatabase.close() - unblock the version change transaction created by an open database request",
          "status": "FAIL",
          "message": "assert_equals: versionchange event fired # expected (number) 0 but got (undefined) undefined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_close2.htm",
      "subtests": [
        {
          "name": "IDBDatabase.close() - unblock the delete database request",
          "status": "FAIL",
          "message": "assert_true: versionchange event fired expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore-createIndex-emptyname.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore() and IDBObjectStore.createIndex() - both with empty name",
          "status": "FAIL",
          "message": "assert_equals: indexNames[0] expected (string) \"\" but got (object) null"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore() - returns an instance of IDBObjectStore",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore10-1000ends.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore() - create 1000 object stores, add one item and delete",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore10-emptyname.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore() - empty name",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore11.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore() - attempting to create an existing object store with a different keyPath throw ConstraintError ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore2.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore() - object store 'name' and 'keyPath' properties are correctly set ",
          "status": "FAIL",
          "message": "assert_equals: auto increment expected (boolean) false but got (undefined) undefined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore3.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore() - attempt to create an object store outside of a version change transaction ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore4.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore() - attempt to create an object store that already exists ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore5.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore() - object store's name appears in database's list ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore6.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore() - attempt to create an object store with an invalid key path ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore7.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createObjectStore() - create an object store with an unknown optional parameter",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore8-parameters.htm",
      "subtests": [
        {
          "name": "IDBObjectStoreParameters - autoInc true",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStoreParameters - autoInc true, keyPath null",
          "status": "FAIL",
          "message": "InvalidAccessError"
        },
        {
          "name": "IDBObjectStoreParameters - autoInc true, keyPath undefined",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStoreParameters - autoInc true, keyPath string",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStoreParameters - autoInc false, keyPath empty",
          "status": "FAIL",
          "message": "InvalidAccessError"
        },
        {
          "name": "IDBObjectStoreParameters - autoInc false, keyPath array",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStoreParameters - autoInc false, keyPath string",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStoreParameters - keyPath empty",
          "status": "FAIL",
          "message": "InvalidAccessError"
        },
        {
          "name": "IDBObjectStoreParameters - keyPath array",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStoreParameters - keyPath string",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStoreParameters - keyPath null",
          "status": "FAIL",
          "message": "InvalidAccessError"
        },
        {
          "name": "IDBObjectStoreParameters - keyPath undefined",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_createObjectStore9-invalidparameters.htm",
      "subtests": [
        {
          "name": "createObjectStore: Invalid optionalParameters - autoInc and empty keyPath",
          "status": "PASS",
          "message": null
        },
        {
          "name": "createObjectStore: Invalid optionalParameters - autoInc and keyPath array",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                e.target.result.createObjectStore(\"store\", params);\n            }\" threw object \"InvalidAccessError\" that is not a DOMException SyntaxError: property \"code\" is equal to 15, expected 12"
        },
        {
          "name": "createObjectStore: Invalid optionalParameters - autoInc and keyPath array 2",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                e.target.result.createObjectStore(\"store\", params);\n            }\" did not throw"
        },
        {
          "name": "createObjectStore: Invalid optionalParameters - autoInc and keyPath object",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_deleteObjectStore.htm",
      "subtests": [
        {
          "name": "IDBDatabase.deleteObjectStore() - object store's name is removed from database's list ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_deleteObjectStore2.htm",
      "subtests": [
        {
          "name": "IDBDatabase.deleteObjectStore() - attempt to remove an object store outside of a version change transaction ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_deleteObjectStore3.htm",
      "subtests": [
        {
          "name": "IDBDatabase.deleteObjectStore() - attempt to remove an object store that does not exist ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_deleteObjectStore4-not_reused.htm",
      "subtests": [
        {
          "name": "IDBDatabase.deleteObjectStore() - the object store is not reused",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_transaction.htm",
      "subtests": [
        {
          "name": "IDBDatabase.transaction() - attempt to open a transaction with invalid scope",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_transaction2.htm",
      "subtests": [
        {
          "name": "IDBDatabase.transaction() - opening a transaction defaults to a read-only mode ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_transaction3.htm",
      "subtests": [
        {
          "name": "IDBDatabase.transaction() - attempt to open a transaction from closed database connection ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_transaction4.htm",
      "subtests": [
        {
          "name": "IDBDatabase.transaction() - attempt to open a transaction with invalid mode",
          "status": "FAIL",
          "message": "assert_throws: function \"function () { db.transaction('test', 'whatever'); }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"[object Object]\" (\"TypeError\")"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbdatabase_transaction5.htm",
      "subtests": [
        {
          "name": "IDBDatabase.transaction() - If storeNames is an empty list, the implementation must throw a DOMException of type InvalidAccessError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory-deleteDatabase-opaque-origin.html",
      "subtests": [
        {
          "name": "IDBFactory.deleteDatabase() in non-sandboxed iframe should not throw",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "IDBFactory.deleteDatabase() in sandboxed iframe should throw SecurityError",
          "status": "NOTRUN",
          "message": null
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory-deleteDatabase-request-success.html",
      "subtests": [
        {
          "name": "Properties of IDBOpenDBRequest during IDBFactory deleteDatabase()",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory-open-error-properties.html",
      "subtests": [
        {
          "name": "Properties of error event from failed open()",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory-open-opaque-origin.html",
      "subtests": [
        {
          "name": "IDBFactory.open() in non-sandboxed iframe should not throw",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "IDBFactory.open() in sandboxed iframe should throw SecurityError",
          "status": "NOTRUN",
          "message": null
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory-open-request-error.html",
      "subtests": [
        {
          "name": "Properties of IDBOpenDBRequest during failed IDBFactory open()",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory-open-request-success.html",
      "subtests": [
        {
          "name": "Properties of IDBOpenDBRequest during successful IDBFactory open()",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_cmp.htm",
      "subtests": [
        {
          "name": "IDBFactory.cmp()",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_cmp2.htm",
      "subtests": [
        {
          "name": "IDBFactory.cmp() - no argument",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory.cmp() - null",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n            indexedDB.cmp(null, null);\n        }\" threw object \"Error: Invalid argument.\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "IDBFactory.cmp() - NaN",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_cmp3.htm",
      "subtests": [
        {
          "name": "Array v.s. Binary",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Binary v.s. String",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "String v.s. Date",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Date v.s. Number",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_cmp4.htm",
      "subtests": [
        {
          "name": "Compare in unsigned octet values (in the range [0, 255])",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Compare values in then same length",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Compare values in different lengths",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Compare when the values in the range of their minimal length are the same",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_deleteDatabase.htm",
      "subtests": [
        {
          "name": "IDBFactory.deleteDatabase() - request has no source ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_deleteDatabase2.htm",
      "subtests": [
        {
          "name": "IDBFactory.deleteDatabase() - result of the request is set to undefined",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_deleteDatabase3.htm",
      "subtests": [
        {
          "name": "IDBFactory.deleteDatabase() - success event",
          "status": "FAIL",
          "message": "assert_equals: oldVersion expected (number) 9 but got (undefined) undefined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_deleteDatabase4.htm",
      "subtests": [
        {
          "name": "Delete an existing database",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Delete a nonexistent database",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open.htm",
      "subtests": [
        {
          "name": "IDBFactory.open() - request has no source",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open10.htm",
      "subtests": [
        {
          "name": "IDBFactory.open() - error in upgradeneeded resets db",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open11.htm",
      "subtests": [
        {
          "name": "IDBFactory.open() - second open's transaction is available to get objectStores",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open12.htm",
      "subtests": [
        {
          "name": "IDBFactory.open() - upgradeneeded gets VersionChangeEvent",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory.open() - upgradeneeded gets VersionChangeEvent - second upgrade",
          "status": "FAIL",
          "message": "assert_unreached: unexpected open.blocked event Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open2.htm",
      "subtests": [
        {
          "name": "IDBFactory.open() - database 'name' and 'version' are correctly set",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open3.htm",
      "subtests": [
        {
          "name": "IDBFactory.open() - no version opens current database",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open4.htm",
      "subtests": [
        {
          "name": "IDBFactory.open() - new database has default version",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open5.htm",
      "subtests": [
        {
          "name": "IDBFactory.open() - new database is empty",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open6.htm",
      "subtests": [
        {
          "name": "IDBFactory.open() - open database with a lower version than current",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open7.htm",
      "subtests": [
        {
          "name": "IDBFactory.open() - open database with a higher version than current",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open8.htm",
      "subtests": [
        {
          "name": "IDBFactory.open() - error in version change transaction aborts open",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbfactory_open9.htm",
      "subtests": [
        {
          "name": "Calling open() with version argument -1 should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument -0.5 should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument 0 should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument 0.5 should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument 0.8 should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument 9007199254740992 should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" did not throw"
        },
        {
          "name": "Calling open() with version argument NaN should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument Infinity should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument -Infinity should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument \"foo\" should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument null should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"Error: Invalid argument.\" (\"Error\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument false should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument object should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument object (second) should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument object (third) should throw TypeError.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n        window.indexedDB.open('test', val);\n      }\" threw object \"InvalidAccessError\" (\"InvalidAccessError\") expected object \"TypeError\" (\"TypeError\")"
        },
        {
          "name": "Calling open() with version argument 1.5 should not throw.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Calling open() with version argument 9007199254740991 should not throw.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Calling open() with version argument undefined should not throw.",
          "status": "FAIL",
          "message": "InvalidAccessError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex-getAll-enforcerange.html",
      "subtests": [
        {
          "name": "IDBIndex.getAll() uses [EnforceRange]",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex-getAllKeys-enforcerange.html",
      "subtests": [
        {
          "name": "IDBIndex.getAllKeys() uses [EnforceRange]",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex-multientry-arraykeypath.htm",
      "subtests": [
        {
          "name": "IDBIndex.multiEntry: array keyPath with multiEntry",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n            store.createIndex('actors', ['name'], { multiEntry: true })\n        }\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex-multientry-big.htm",
      "subtests": [
        {
          "name": "Adding one item with 1000 multiEntry keys",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Getting the one item by 1000 indeced keys ",
          "status": "FAIL",
          "message": "Unable to get property 'test' of undefined or null reference"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex-multientry.htm",
      "subtests": [
        {
          "name": "IDBIndex.multiEntry - adding keys",
          "status": "FAIL",
          "message": "assert_array_equals: property 1, expected 2 but got undefined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex-query-exception-order.html",
      "subtests": [
        {
          "name": "IDBIndex.get exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex.get exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede query check (DataError) function \"() => { index[method]({}); }\" threw object \"DataError\" that is not a DOMException TransactionInactiveError: property \"name\" is equal to \"DataError\", expected \"TransactionInactiveError\""
        },
        {
          "name": "IDBIndex.getAll exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "FAIL",
          "message": "assert_throws: \"has been deleted\" check (InvalidStateError) should precede \"not active\" check (TransactionInactiveError) function \"() => { index[method]('key'); }\" threw object \"TypeError: Object doesn't support property or method 'getAll'\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "IDBIndex.getAll exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede query check (DataError) function \"() => { index[method]({}); }\" threw object \"TypeError: Object doesn't support property or method 'getAll'\" that is not a DOMException TransactionInactiveError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "IDBIndex.getAllKeys exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "FAIL",
          "message": "assert_throws: \"has been deleted\" check (InvalidStateError) should precede \"not active\" check (TransactionInactiveError) function \"() => { index[method]('key'); }\" threw object \"TypeError: Object doesn't support property or method 'getAllKeys'\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "IDBIndex.getAllKeys exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede query check (DataError) function \"() => { index[method]({}); }\" threw object \"TypeError: Object doesn't support property or method 'getAllKeys'\" that is not a DOMException TransactionInactiveError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "IDBIndex.count exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex.count exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede query check (DataError) function \"() => { index[method]({}); }\" threw object \"DataError\" that is not a DOMException TransactionInactiveError: property \"name\" is equal to \"DataError\", expected \"TransactionInactiveError\""
        },
        {
          "name": "IDBIndex.openCursor exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex.openCursor exception order: TransactionInactiveError vs. DataError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex.openKeyCursor exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex.openKeyCursor exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex-rename-abort.html",
      "subtests": [
        {
          "name": "IndexedDB index rename in aborted transaction",
          "status": "FAIL",
          "message": "Assignment to read-only properties is not allowed in strict mode"
        },
        {
          "name": "IndexedDB index creation and rename in an aborted transaction",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex-rename-errors.html",
      "subtests": [
        {
          "name": "IndexedDB deleted index rename throws",
          "status": "FAIL",
          "message": "assert_throws: function \"() => index.name = 'renamed_by_author'\" threw object \"TypeError: Assignment to read-only properties is not allowed in strict mode\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "IndexedDB index rename throws in a readonly transaction",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "IndexedDB index rename throws in a readwrite transaction",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "IndexedDB index rename throws in an inactive transaction",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "IndexedDB index rename to the name of another index throws",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "IndexedDB index rename handles exceptions when stringifying names",
          "status": "NOTRUN",
          "message": null
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex-rename.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": ""
    },
    {
      "test": "/IndexedDB/idbindex_count.htm",
      "subtests": [
        {
          "name": "IDBIndex.count() - returns the number of records in the index ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_count2.htm",
      "subtests": [
        {
          "name": "IDBIndex.count() - returns the number of records that have keys within the range ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_count3.htm",
      "subtests": [
        {
          "name": "IDBIndex.count() - returns the number of records that have keys with the key",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_count4.htm",
      "subtests": [
        {
          "name": "IDBIndex.count() - throw DataError when using invalid key",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_get.htm",
      "subtests": [
        {
          "name": "IDBIndex.get() - returns the record ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_get2.htm",
      "subtests": [
        {
          "name": "IDBIndex.get() - returns the record where the index contains duplicate values ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_get3.htm",
      "subtests": [
        {
          "name": "IDBIndex.get() - attempt to retrieve a record that doesn't exist ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_get4.htm",
      "subtests": [
        {
          "name": "IDBIndex.get() - returns the record with the first key in the range ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_get5.htm",
      "subtests": [
        {
          "name": "IDBIndex.get() - throw DataError when using invalid key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_get6.htm",
      "subtests": [
        {
          "name": "IDBIndex.get() - throw InvalidStateError when the index is deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_get7.htm",
      "subtests": [
        {
          "name": "IDBIndex.get() - throw TransactionInactiveError on aborted transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_get8.htm",
      "subtests": [
        {
          "name": "IDBIndex.get() - throw InvalidStateError on index deleted by aborted upgrade",
          "status": "FAIL",
          "message": "assert_throws: function \"function (){\n            index.get(\"data\");\n        }\" threw object \"TransactionInactiveError\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_getAll.html",
      "subtests": [
        {
          "name": "Single item get",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Empty object store",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get all keys",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "maxCount=10",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range with maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get upper excluded",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get lower excluded",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range (generated) with maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Non existent key",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "maxCount=0",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Retrieve multiEntry key",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Retrieve one key multiple values",
          "status": "FAIL",
          "message": "Invalid argument."
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_getAllKeys.html",
      "subtests": [
        {
          "name": "Single item get",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Empty object store",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get all keys",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get all generated keys",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "maxCount=10",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range with maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get upper excluded",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get lower excluded",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range (generated) with maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Non existent key",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "maxCount=0",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Retrieve multiEntry keys",
          "status": "FAIL",
          "message": "Invalid argument."
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_getKey.htm",
      "subtests": [
        {
          "name": "IDBIndex.getKey() - returns the record's primary key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_getKey2.htm",
      "subtests": [
        {
          "name": "IDBIndex.getKey() - returns the record's primary key where the index contains duplicate values ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_getKey3.htm",
      "subtests": [
        {
          "name": "IDBIndex.getKey() - attempt to retrieve the primary key of a record that doesn't exist",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_getKey4.htm",
      "subtests": [
        {
          "name": "IDBIndex.getKey() - returns the key of the first record within the range ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_getKey5.htm",
      "subtests": [
        {
          "name": "IDBIndex.getKey() - throw DataError when using invalid key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_getKey6.htm",
      "subtests": [
        {
          "name": "IDBIndex.getKey() - throw InvalidStateError when the index is deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_getKey7.htm",
      "subtests": [
        {
          "name": "IDBIndex.getKey() - throw TransactionInactiveError on aborted transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_getKey8.htm",
      "subtests": [
        {
          "name": "IDBIndex.getKey() - throw InvalidStateError on index deleted by aborted upgrade",
          "status": "FAIL",
          "message": "assert_throws: function \"function (){\n            index.getKey(\"data\");\n        }\" threw object \"TransactionInactiveError\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_indexNames.htm",
      "subtests": [
        {
          "name": "IDBIndex.getKey() - returns the record's primary key",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_openCursor.htm",
      "subtests": [
        {
          "name": "IDBIndex.openCursor() - throw InvalidStateError when the index is deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_openCursor2.htm",
      "subtests": [
        {
          "name": "IDBIndex.openCursor() - throw TransactionInactiveError on aborted transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_openCursor3.htm",
      "subtests": [
        {
          "name": "IDBIndex.openCursor() - throw InvalidStateError on index deleted by aborted upgrade",
          "status": "FAIL",
          "message": "assert_throws: function \"function (){\n            index.openCursor();\n        }\" threw object \"TransactionInactiveError\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_openKeyCursor.htm",
      "subtests": [
        {
          "name": "IDBIndex.openKeyCursor() - throw DataError when using a invalid key",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_openKeyCursor2.htm",
      "subtests": [
        {
          "name": "IDBIndex.openKeyCursor() - throw InvalidStateError when the index is deleted",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_openKeyCursor3.htm",
      "subtests": [
        {
          "name": "IDBIndex.openKeyCursor() - throw TransactionInactiveError on aborted transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbindex_openKeyCursor4.htm",
      "subtests": [
        {
          "name": "IDBIndex.openKeyCursor() - throw InvalidStateError on index deleted by aborted upgrade",
          "status": "FAIL",
          "message": "assert_throws: function \"function (){\n            index.openKeyCursor();\n        }\" threw object \"TransactionInactiveError\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbkeyrange-includes.htm",
      "subtests": [
        {
          "name": "IDBKeyRange.includes() with invalid input",
          "status": "FAIL",
          "message": "assert_throws: throws if key is undefined function \"function () { range.includes(undefined); }\" threw object \"TypeError: Object doesn't support property or method 'includes'\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "IDBKeyRange.includes() with a closed range",
          "status": "FAIL",
          "message": "assert_true: IDBKeyRange has a .includes expected true got false"
        },
        {
          "name": "IDBKeyRange.includes() with an open range",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'includes'"
        },
        {
          "name": "IDBKeyRange.includes() with a lower-open upper-closed range",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'includes'"
        },
        {
          "name": "IDBKeyRange.includes() with a lower-closed upper-open range",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'includes'"
        },
        {
          "name": "IDBKeyRange.includes() with an only range",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'includes'"
        },
        {
          "name": "IDBKeyRange.includes() with an closed lower-bounded range",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'includes'"
        },
        {
          "name": "IDBKeyRange.includes() with an open lower-bounded range",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'includes'"
        },
        {
          "name": "IDBKeyRange.includes() with an closed upper-bounded range",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'includes'"
        },
        {
          "name": "IDBKeyRange.includes() with an open upper-bounded range",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'includes'"
        },
        {
          "name": "IDBKeyRange.includes() with non-numeric keys",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'includes'"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbkeyrange.htm",
      "subtests": [
        {
          "name": "IDBKeyRange.only() - returns an IDBKeyRange and the properties are set correctly",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange.only() - throws on invalid keys",
          "status": "FAIL",
          "message": "assert_throws: null is not a valid key function \"function () { IDBKeyRange.only(null); }\" threw object \"Error: Invalid argument.\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "IDBKeyRange.lowerBound() - returns an IDBKeyRange and the properties are set correctly",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange.lowerBound() - 'open' parameter has correct default set",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange.lowerBound() - throws on invalid keys",
          "status": "FAIL",
          "message": "assert_throws: null is not a valid key function \"function () { IDBKeyRange.lowerBound(null); }\" threw object \"Error: Invalid argument.\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "IDBKeyRange.upperBound() - returns an IDBKeyRange and the properties are set correctly",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange.upperBound() - 'open' parameter has correct default set",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange.upperBound() - throws on invalid keys",
          "status": "FAIL",
          "message": "assert_throws: null is not a valid key function \"function () { IDBKeyRange.upperBound(null); }\" threw object \"Error: Invalid argument.\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "IDBKeyRange.bound() - returns an IDBKeyRange and the properties are set correctly",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange.bound() - 'lowerOpen' and 'upperOpen' parameters have correct defaults set",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbkeyrange_incorrect.htm",
      "subtests": [
        {
          "name": "IDBKeyRange.bound() - bound requires more than 0 arguments.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange.bound(null, null) - null parameters are incorrect.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                    IDBKeyRange.bound(null, null);\n                }\" threw object \"Error: Invalid argument.\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "IDBKeyRange.bound(1, null / null, 1) - null parameter is incorrect.",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                    IDBKeyRange.bound(1, null);\n                }\" threw object \"Error: Invalid argument.\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "IDBKeyRange.bound(lower, upper / lower > upper) -  'lower' is greater than 'upper'.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange.bound(DOMString/Date/Array, 1) - A DOMString, Date and Array are greater than a float.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange.bound(noExistingVariable, 1 / goodVariable, noExistingVariable) - noExistingVariable is not defined.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange.bound(true, 1) - boolean is not a valid key type.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore-add-put-exception-order.html",
      "subtests": [
        {
          "name": "IDBObjectStore.put exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore.put exception order: TransactionInactiveError vs. ReadOnlyError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede \"read only\" check (ReadOnlyError) function \"() => { store[method]('key', 'value'); }\" threw object \"ReadOnlyError\" that is not a DOMException TransactionInactiveError: property \"name\" is equal to \"ReadOnlyError\", expected \"TransactionInactiveError\""
        },
        {
          "name": "IDBObjectStore.put exception order: ReadOnlyError vs. DataError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore.add exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore.add exception order: TransactionInactiveError vs. ReadOnlyError",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "IDBObjectStore.add exception order: ReadOnlyError vs. DataError",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "ERROR",
      "message": "Test named 'IDBObjectStore.add exception order: ReadOnlyError vs. DataError' specified 1 'cleanup' function, and 1 failed."
    },
    {
      "test": "/IndexedDB/idbobjectstore-clear-exception-order.html",
      "subtests": [
        {
          "name": "IDBObjectStore.clear exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore.clear exception order: TransactionInactiveError vs. ReadOnlyError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede \"read only\" check (ReadOnlyError) function \"() => { store.clear(); }\" threw object \"ReadOnlyError\" that is not a DOMException TransactionInactiveError: property \"name\" is equal to \"ReadOnlyError\", expected \"TransactionInactiveError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore-delete-exception-order.html",
      "subtests": [
        {
          "name": "IDBObjectStore.delete exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore.delete exception order: TransactionInactiveError vs. ReadOnlyError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore.delete exception order: ReadOnlyError vs. DataError",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "ERROR",
      "message": "Test named 'IDBObjectStore.delete exception order: ReadOnlyError vs. DataError' specified 1 'cleanup' function, and 1 failed."
    },
    {
      "test": "/IndexedDB/idbobjectstore-deleteIndex-exception-order.html",
      "subtests": [
        {
          "name": "IDBObjectStore.deleteIndex exception order: InvalidStateError #1 vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore.deleteIndex exception order: InvalidStateError #2 vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore.deleteIndex exception order: TransactionInactiveError vs. NotFoundError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore-getAll-enforcerange.html",
      "subtests": [
        {
          "name": "IDBObjectStore.getAll() uses [EnforceRange]",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore-getAllKeys-enforcerange.html",
      "subtests": [
        {
          "name": "IDBObjectStore.getAllKeys() uses [EnforceRange]",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore-index-finished.html",
      "subtests": [
        {
          "name": "IDBObjectStore index() behavior when transaction is finished",
          "status": "FAIL",
          "message": "assert_throws: index() should throw if transaction is finished function \"() => store.index('index')\" threw object \"TransactionInactiveError\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore-query-exception-order.html",
      "subtests": [
        {
          "name": "IDBObjectStore.get exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore.get exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede query check (DataError) function \"() => { store[method]({}); }\" threw object \"DataError\" that is not a DOMException TransactionInactiveError: property \"name\" is equal to \"DataError\", expected \"TransactionInactiveError\""
        },
        {
          "name": "IDBObjectStore.getAll exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "FAIL",
          "message": "assert_throws: \"has been deleted\" check (InvalidStateError) should precede \"not active\" check (TransactionInactiveError) function \"() => { store2[method]('key'); }\" threw object \"TypeError: Object doesn't support property or method 'getAll'\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "IDBObjectStore.getAll exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede query check (DataError) function \"() => { store[method]({}); }\" threw object \"TypeError: Object doesn't support property or method 'getAll'\" that is not a DOMException TransactionInactiveError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "IDBObjectStore.getAllKeys exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "FAIL",
          "message": "assert_throws: \"has been deleted\" check (InvalidStateError) should precede \"not active\" check (TransactionInactiveError) function \"() => { store2[method]('key'); }\" threw object \"TypeError: Object doesn't support property or method 'getAllKeys'\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "IDBObjectStore.getAllKeys exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede query check (DataError) function \"() => { store[method]({}); }\" threw object \"TypeError: Object doesn't support property or method 'getAllKeys'\" that is not a DOMException TransactionInactiveError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "IDBObjectStore.count exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore.count exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede query check (DataError) function \"() => { store[method]({}); }\" threw object \"DataError\" that is not a DOMException TransactionInactiveError: property \"name\" is equal to \"DataError\", expected \"TransactionInactiveError\""
        },
        {
          "name": "IDBObjectStore.openCursor exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore.openCursor exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "assert_throws: \"not active\" check (TransactionInactiveError) should precede query check (DataError) function \"() => { store[method]({}); }\" threw object \"DataError\" that is not a DOMException TransactionInactiveError: property \"name\" is equal to \"DataError\", expected \"TransactionInactiveError\""
        },
        {
          "name": "IDBObjectStore.openKeyCursor exception order: InvalidStateError vs. TransactionInactiveError",
          "status": "FAIL",
          "message": "assert_throws: \"has been deleted\" check (InvalidStateError) should precede \"not active\" check (TransactionInactiveError) function \"() => { store2[method]('key'); }\" threw object \"TypeError: Object doesn't support property or method 'openKeyCursor'\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "IDBObjectStore.openKeyCursor exception order: TransactionInactiveError vs. DataError",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore-rename-abort.html",
      "subtests": [
        {
          "name": "IndexedDB object store rename in aborted transaction",
          "status": "FAIL",
          "message": "Assignment to read-only properties is not allowed in strict mode"
        },
        {
          "name": "IndexedDB object store creation and rename in an aborted transaction",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore-rename-errors.html",
      "subtests": [
        {
          "name": "IndexedDB deleted object store rename throws",
          "status": "FAIL",
          "message": "assert_throws: function \"() => store.name = 'renamed_books'\" threw object \"TypeError: Assignment to read-only properties is not allowed in strict mode\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "IndexedDB object store rename throws in a readonly transaction",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "IndexedDB object store rename throws in a readwrite transaction",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "IndexedDB object store rename throws in an inactive transaction",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "IndexedDB object store rename to the name of another store throws",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "IndexedDB object store rename handles exceptions when stringifying names",
          "status": "NOTRUN",
          "message": null
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore-rename-store.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": ""
    },
    {
      "test": "/IndexedDB/idbobjectstore_add.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - add with an inline key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add10.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - Attempt to call 'add' without an key parameter when the object store uses out-of-line keys ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add11.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - Attempt to add a record where the record's key does not meet the constraints of a valid key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add12.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - Attempt to add a record where the record's in-line key is not defined ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add13.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - Attempt to add a record where the out of line key provided does not meet the constraints of a valid key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add14.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - Add a record where a value being indexed does not meet the constraints of a valid key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add15.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - If the transaction this IDBObjectStore belongs to has its mode set to readonly, throw ReadOnlyError ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add16.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - If the object store has been deleted, the implementation must throw a DOMException of type InvalidStateError ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add2.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - add with an out-of-line key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add3.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - record with same key already exists ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add4.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - add where an index has unique:true specified ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add5.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - object store's key path is an object attribute ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add6.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - autoIncrement and inline keys ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add7.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - autoIncrement and out-of-line keys ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add8.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - object store has autoIncrement:true and the key path is an object attribute ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_add9.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.add() - Attempt to add a record that does not meet the constraints of an object store's inline key requirements ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_clear.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.clear() - Verify clear removes all records ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_clear2.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.clear() - clear removes all records from an index ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_clear3.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.clear() - If the transaction this IDBObjectStore belongs to has its mode set to readonly, throw ReadOnlyError ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_clear4.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.clear() - If the object store has been deleted, the implementation must throw a DOMException of type InvalidStateError ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_count.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.count() - returns the number of records in the object store ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_count2.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.count() - returns the number of records that have keys within the range ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_count3.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.count() - returns the number of records that have keys with the key",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_count4.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.count() - If the object store has been deleted, the implementation must throw a DOMException of type InvalidStateError ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.createIndex() - returns an IDBIndex and the properties are set correctly",
          "status": "FAIL",
          "message": "assert_false: multiEntry expected false got undefined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex10.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createIndex() - If an index with the name name already exists in this object store, the implementation must throw a DOMException of type ConstraintError ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex11.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createIndex() - If keyPath is not a valid key path, the implementation must throw a DOMException of type SyntaxError ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex12.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createIndex() - If the object store has been deleted, the implementation must throw a DOMException of type InvalidStateError ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex13.htm",
      "subtests": [
        {
          "name": "IDBDatabase.createIndex() - Operate out versionchange throw InvalidStateError ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex14-exception_order.htm",
      "subtests": [
        {
          "name": "InvalidStateError(Incorrect mode) vs. TransactionInactiveError",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "InvalidStateError(Deleted ObjectStore) vs. TransactionInactiveError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "TransactionInactiveError vs. ConstraintError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "ConstraintError vs. SyntaxError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "SyntaxError vs. InvalidAccessError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "ERROR",
      "message": "Error: assert_throws: Mode check should precede state check of the transaction function \"function () {\n                store.createIndex(\"index\", \"foo\");\n            }\" threw object \"TransactionInactiveError\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11"
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex15-autoincrement.htm",
      "subtests": [
        {
          "name": "Explicit Primary Key",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Auto-Increment Primary Key",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex2.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.createIndex() - attempt to create an index that requires unique values on an object store already contains duplicates ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex3-usable-right-away.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.createIndex() - the index is usable right after being made",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex4-deleteIndex-event_order.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.createIndex() - Event ordering for a later deleted index",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex5-emptykeypath.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.createIndex() - empty keyPath",
          "status": "FAIL",
          "message": "assert_equals: result expected (string) \"object_4\" but got (undefined) undefined"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex6-event_order.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.createIndex() - event order when unique constraint is triggered",
          "status": "FAIL",
          "message": "assert_array_equals: events property 5, expected \"transaction.abort: ConstraintError\" but got \"transaction.abort: UnknownError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex7-event_order.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.createIndex() - Event ordering for ConstraintError on request",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex8-valid_keys.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.createIndex() - index can be valid keys",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_createIndex9-emptyname.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.createIndex() - empty name",
          "status": "FAIL",
          "message": "assert_equals: indexNames[0] expected (string) \"\" but got (object) null"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_delete.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.delete() - delete removes record (inline keys)",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_delete2.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.delete() - key doesn't match any records ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_delete3.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.delete() - object store's key path is an object attribute ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_delete4.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.delete() - delete removes record (out-of-line keys) ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_delete5.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.delete() - removes all of the records in the range",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_delete6.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.delete() - If the transaction this IDBObjectStore belongs to has its mode set to readonly, throw ReadOnlyError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_delete7.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.delete() - If the object store has been deleted, the implementation must throw a DOMException of type InvalidStateError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_deleteIndex.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.deleteIndex() - removes the index ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_deleted.htm",
      "subtests": [
        {
          "name": "Attempting to use deleted IDBObjectStore",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_get.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.get() - key is a number ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_get2.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.get() - key is a string ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_get3.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.get() - key is a Date ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_get4.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.get() - attempt to retrieve a record that doesn't exist ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_get5.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.get() - returns the record with the first key in the range ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_get6.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.get() - throw TransactionInactiveError on aborted transaction ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_get7.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.get() - throw DataError when using invalid key ",
          "status": "FAIL",
          "message": "assert_throws: throw DataError when using invalid key. function \"function () {\n            store.get(null)\n        }\" threw object \"Error: Invalid argument.\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_getAll.html",
      "subtests": [
        {
          "name": "Single item get",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Single item get (generated key)",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "getAll on empty object store",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get all values",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Test maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range with maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get upper excluded",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get lower excluded",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range (generated) with maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Non existent key",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "zero maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_getAllKeys.html",
      "subtests": [
        {
          "name": "Single item get",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Single item get (generated key)",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "getAllKeys on empty object store",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get all values",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Test maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range with maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get upper excluded",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get lower excluded",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Get bound range (generated) with maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "Non existent key",
          "status": "FAIL",
          "message": "Invalid argument."
        },
        {
          "name": "zero maxCount",
          "status": "FAIL",
          "message": "Invalid argument."
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_getKey.html",
      "subtests": [],
      "status": "TIMEOUT",
      "message": ""
    },
    {
      "test": "/IndexedDB/idbobjectstore_index.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.index() - returns an index ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_openCursor.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.openCursor() - iterate through 100 objects",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_openCursor_invalid.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.openCursor() - invalid - pass something other than number",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_openKeyCursor.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.openKeyCursor() - forward iteration",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'openKeyCursor'"
        },
        {
          "name": "IDBObjectStore.openKeyCursor() - reverse iteration",
          "status": "FAIL",
          "message": "Object doesn't support property or method 'openKeyCursor'"
        },
        {
          "name": "IDBObjectStore.openKeyCursor() - forward iteration with range",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "IDBObjectStore.openKeyCursor() - reverse iteration with range",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "IDBObjectStore.openKeyCursor() - invalid inputs",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "ERROR",
      "message": "Test named 'IDBObjectStore.openKeyCursor() - invalid inputs' specified 1 'cleanup' function, and 1 failed."
    },
    {
      "test": "/IndexedDB/idbobjectstore_put.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - put with an inline key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put10.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - Attempt to call 'put' without an key parameter when the object store uses out-of-line keys ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put11.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - Attempt to put a record where the record's key does not meet the constraints of a valid key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put12.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - Attempt to put a record where the record's in-line key is not defined ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put13.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - Attempt to put a record where the out of line key provided does not meet the constraints of a valid key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put14.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - Put a record where a value being indexed does not meet the constraints of a valid key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put15.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - If the transaction this IDBObjectStore belongs to has its mode set to readonly, throw ReadOnlyError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put16.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - If the object store has been deleted, the implementation must throw a DOMException of type InvalidStateError",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put2.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - put with an out-of-line key ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put3.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - record with same key already exists ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put4.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - put where an index has unique:true specified ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put5.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - object store's key path is an object attribute ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put6.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - autoIncrement and inline keys ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put7.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - autoIncrement and out-of-line keys ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put8.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - object store has autoIncrement:true and the key path is an object attribute ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbobjectstore_put9.htm",
      "subtests": [
        {
          "name": "IDBObjectStore.put() - Attempt to put a record that does not meet the constraints of an object store's inline key requirements ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbrequest-onupgradeneeded.htm",
      "subtests": [
        {
          "name": "indexedDB.delete called from upgradeneeded handler",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Abort transaction before deleting database in upgradeneeded handler",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Abort transaction after deleting database in upgradeneeded event handler",
          "status": "PASS",
          "message": null
        },
        {
          "name": "transaction oncomplete ordering relative to open request onsuccess",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbrequest_error.html",
      "subtests": [
        {
          "name": "IDBRequest.error throws if ready state is pending",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbrequest_result.html",
      "subtests": [
        {
          "name": "IDBRequest.result throws if ready state is pending",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbtransaction-objectStore-exception-order.html",
      "subtests": [
        {
          "name": "IDBTransaction.objectStore exception order: InvalidStateError vs. NotFoundError",
          "status": "FAIL",
          "message": "assert_throws: \"finished\" check (InvalidStateError) should precede \"name in scope\" check (NotFoundError) function \"() => { tx.objectStore('nope'); }\" threw object \"TransactionInactiveError\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbtransaction-objectStore-finished.html",
      "subtests": [
        {
          "name": "IDBTransaction objectStore() behavior when transaction is finished",
          "status": "FAIL",
          "message": "assert_throws: objectStore() should throw if transaction is finished function \"() => tx.objectStore('store')\" threw object \"TransactionInactiveError\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbtransaction-oncomplete.htm",
      "subtests": [
        {
          "name": "IDBTransaction - complete event",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbtransaction.htm",
      "subtests": [
        {
          "name": "IDBTransaction - request gotten by the handler",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction - request returned by open()",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbtransaction_abort.htm",
      "subtests": [
        {
          "name": "IDBTransaction - abort",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbtransaction_objectStoreNames.html",
      "subtests": [
        {
          "name": "IDBTransaction.objectStoreNames - during upgrade transaction",
          "status": "FAIL",
          "message": "Unable to get property 'length' of undefined or null reference"
        },
        {
          "name": "IDBTransaction.objectStoreNames - value after close",
          "status": "FAIL",
          "message": "Unable to get property 'length' of undefined or null reference"
        },
        {
          "name": "IDBTransaction.objectStoreNames - transaction scope",
          "status": "FAIL",
          "message": "Unable to get property 'length' of undefined or null reference"
        },
        {
          "name": "IDBTransaction.objectStoreNames - value after commit",
          "status": "FAIL",
          "message": "Unable to get property 'length' of undefined or null reference"
        },
        {
          "name": "IDBTransaction.objectStoreNames - value after abort",
          "status": "FAIL",
          "message": "Unable to get property 'length' of undefined or null reference"
        },
        {
          "name": "IDBTransaction.objectStoreNames - sorting",
          "status": "FAIL",
          "message": "Unable to get property 'length' of undefined or null reference"
        },
        {
          "name": "IDBTransaction.objectStoreNames - no duplicates",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "IDBTransaction.objectStoreNames - unusual names",
          "status": "FAIL",
          "message": "Unable to get property 'length' of undefined or null reference"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/idbversionchangeevent.htm",
      "subtests": [
        {
          "name": "IDBVersionChangeEvent fired in upgradeneeded, versionchange and deleteDatabase",
          "status": "FAIL",
          "message": "assert_unreached: delete.blocked Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/index_sort_order.htm",
      "subtests": [
        {
          "name": "Verify key sort order in an index is 'number < Date < DOMString' ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/interfaces.html",
      "subtests": [
        {
          "name": "IndexedDB IDL tests",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Window interface: attribute indexedDB",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBRequest is not EventTarget expected function \"function EventTarget() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBRequest interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBRequest interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute result",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute error",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute source",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute transaction",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute readyState",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute onsuccess",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBRequest interface: attribute onerror",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBOpenDBRequest interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBOpenDBRequest is not IDBRequest expected function \"function IDBRequest() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBOpenDBRequest interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBOpenDBRequest interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBOpenDBRequest interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBOpenDBRequest interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBOpenDBRequest interface: attribute onblocked",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBOpenDBRequest interface: attribute onupgradeneeded",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBVersionChangeEvent interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBVersionChangeEvent is not Event expected function \"function Event() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBVersionChangeEvent interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBVersionChangeEvent interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBVersionChangeEvent interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBVersionChangeEvent interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBVersionChangeEvent interface: attribute oldVersion",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBVersionChangeEvent interface: attribute newVersion",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBVersionChangeEvent must be primary interface of new IDBVersionChangeEvent('foo')",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: Function expected\""
        },
        {
          "name": "Stringification of new IDBVersionChangeEvent('foo')",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: Function expected\""
        },
        {
          "name": "IDBVersionChangeEvent interface: new IDBVersionChangeEvent('foo') must inherit property \"oldVersion\" with the proper type",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: Function expected\""
        },
        {
          "name": "IDBVersionChangeEvent interface: new IDBVersionChangeEvent('foo') must inherit property \"newVersion\" with the proper type",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: Function expected\""
        },
        {
          "name": "IDBFactory interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBFactory interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: operation open(DOMString, unsigned long long)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBFactory interface: operation deleteDatabase(DOMString)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBFactory interface: operation cmp(any, any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 2 but got 0"
        },
        {
          "name": "IDBFactory must be primary interface of window.indexedDB",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of window.indexedDB",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: window.indexedDB must inherit property \"open(DOMString, unsigned long long)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: calling open(DOMString, unsigned long long) on window.indexedDB with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: window.indexedDB must inherit property \"deleteDatabase(DOMString)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: calling deleteDatabase(DOMString) on window.indexedDB with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: window.indexedDB must inherit property \"cmp(any, any)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: calling cmp(any, any) on window.indexedDB with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBDatabase is not EventTarget expected function \"function EventTarget() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBDatabase interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBDatabase interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: attribute name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: attribute version",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: attribute objectStoreNames",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: operation transaction([object Object],[object Object], IDBTransactionMode)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBDatabase interface: operation close()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: operation createObjectStore(DOMString, IDBObjectStoreParameters)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBDatabase interface: operation deleteObjectStore(DOMString)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBDatabase interface: attribute onabort",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBDatabase interface: attribute onclose",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"onclose\" expected true got false"
        },
        {
          "name": "IDBDatabase interface: attribute onerror",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBDatabase interface: attribute onversionchange",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"onversionchange\" expected true got false"
        },
        {
          "name": "IDBObjectStore interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBObjectStore interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: attribute name",
          "status": "FAIL",
          "message": "assert_equals: setter must be function for PutForwards, Replaceable, or non-readonly attributes expected \"function\" but got \"undefined\""
        },
        {
          "name": "IDBObjectStore interface: attribute keyPath",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: attribute indexNames",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: attribute transaction",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: attribute autoIncrement",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"autoIncrement\" expected true got false"
        },
        {
          "name": "IDBObjectStore interface: operation put(any, any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation add(any, any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation delete(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation clear()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: operation get(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation getKey(any)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getKey\" missing"
        },
        {
          "name": "IDBObjectStore interface: operation getAll(any, unsigned long)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getAll\" missing"
        },
        {
          "name": "IDBObjectStore interface: operation getAllKeys(any, unsigned long)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getAllKeys\" missing"
        },
        {
          "name": "IDBObjectStore interface: operation count(any)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: operation openCursor(any, IDBCursorDirection)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: operation openKeyCursor(any, IDBCursorDirection)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"openKeyCursor\" missing"
        },
        {
          "name": "IDBObjectStore interface: operation index(DOMString)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation createIndex(DOMString, [object Object],[object Object], IDBIndexParameters)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 2 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation deleteIndex(DOMString)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBIndex interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBIndex interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: attribute name",
          "status": "FAIL",
          "message": "assert_equals: setter must be function for PutForwards, Replaceable, or non-readonly attributes expected \"function\" but got \"undefined\""
        },
        {
          "name": "IDBIndex interface: attribute objectStore",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: attribute keyPath",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: attribute multiEntry",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"multiEntry\" expected true got false"
        },
        {
          "name": "IDBIndex interface: attribute unique",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: operation get(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBIndex interface: operation getKey(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBIndex interface: operation getAll(any, unsigned long)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getAll\" missing"
        },
        {
          "name": "IDBIndex interface: operation getAllKeys(any, unsigned long)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getAllKeys\" missing"
        },
        {
          "name": "IDBIndex interface: operation count(any)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: operation openCursor(any, IDBCursorDirection)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: operation openKeyCursor(any, IDBCursorDirection)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBKeyRange interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: attribute lower",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: attribute upper",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: attribute lowerOpen",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: attribute upperOpen",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: operation only(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBKeyRange interface: operation lowerBound(any, boolean)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBKeyRange interface: operation upperBound(any, boolean)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBKeyRange interface: operation bound(any, any, boolean, boolean)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 2 but got 0"
        },
        {
          "name": "IDBKeyRange interface: operation includes(any)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"includes\" missing"
        },
        {
          "name": "IDBKeyRange must be primary interface of IDBKeyRange.only(0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of IDBKeyRange.only(0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"lower\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"upper\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"lowerOpen\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"upperOpen\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"only(any)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: calling only(any) on IDBKeyRange.only(0) with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"lowerBound(any, boolean)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: calling lowerBound(any, boolean) on IDBKeyRange.only(0) with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"upperBound(any, boolean)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: calling upperBound(any, boolean) on IDBKeyRange.only(0) with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"bound(any, any, boolean, boolean)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: calling bound(any, any, boolean, boolean) on IDBKeyRange.only(0) with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"includes(any)\" with the proper type",
          "status": "FAIL",
          "message": "assert_inherits: property \"includes\" not found in prototype chain"
        },
        {
          "name": "IDBKeyRange interface: calling includes(any) on IDBKeyRange.only(0) with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_inherits: property \"includes\" not found in prototype chain"
        },
        {
          "name": "IDBCursor interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBCursor interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: attribute source",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: attribute direction",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: attribute key",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: attribute primaryKey",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: operation advance(unsigned long)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBCursor interface: operation continue(any)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: operation continuePrimaryKey(any, any)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"continuePrimaryKey\" missing"
        },
        {
          "name": "IDBCursor interface: operation update(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBCursor interface: operation delete()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursorWithValue interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBCursorWithValue is not IDBCursor expected function \"function IDBCursor() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBCursorWithValue interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBCursorWithValue interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursorWithValue interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursorWithValue interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursorWithValue interface: attribute value",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBTransaction is not EventTarget expected function \"function EventTarget() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBTransaction interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBTransaction interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: attribute objectStoreNames",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"objectStoreNames\" expected true got false"
        },
        {
          "name": "IDBTransaction interface: attribute mode",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: attribute db",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: attribute error",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: operation objectStore(DOMString)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBTransaction interface: operation abort()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: attribute onabort",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBTransaction interface: attribute oncomplete",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBTransaction interface: attribute onerror",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/interfaces.worker.html",
      "subtests": [
        {
          "name": "Untitled",
          "status": "PASS",
          "message": null
        },
        {
          "name": "WorkerGlobalScope interface: attribute indexedDB",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBRequest is not EventTarget expected function \"function EventTarget() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBRequest interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBRequest interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute result",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute error",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute source",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute transaction",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute readyState",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBRequest interface: attribute onsuccess",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBRequest interface: attribute onerror",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBOpenDBRequest interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBOpenDBRequest is not IDBRequest expected function \"function IDBRequest() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBOpenDBRequest interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBOpenDBRequest interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBOpenDBRequest interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBOpenDBRequest interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBOpenDBRequest interface: attribute onblocked",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBOpenDBRequest interface: attribute onupgradeneeded",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBVersionChangeEvent interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBVersionChangeEvent is not Event expected function \"function Event() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBVersionChangeEvent interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBVersionChangeEvent interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBVersionChangeEvent interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBVersionChangeEvent interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBVersionChangeEvent interface: attribute oldVersion",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBVersionChangeEvent interface: attribute newVersion",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBVersionChangeEvent must be primary interface of new IDBVersionChangeEvent('foo')",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: Function expected\""
        },
        {
          "name": "Stringification of new IDBVersionChangeEvent('foo')",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: Function expected\""
        },
        {
          "name": "IDBVersionChangeEvent interface: new IDBVersionChangeEvent('foo') must inherit property \"oldVersion\" with the proper type",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: Function expected\""
        },
        {
          "name": "IDBVersionChangeEvent interface: new IDBVersionChangeEvent('foo') must inherit property \"newVersion\" with the proper type",
          "status": "FAIL",
          "message": "assert_equals: Unexpected exception when evaluating object expected null but got object \"TypeError: Function expected\""
        },
        {
          "name": "IDBFactory interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBFactory interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: operation open(DOMString, unsigned long long)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBFactory interface: operation deleteDatabase(DOMString)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBFactory interface: operation cmp(any, any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 2 but got 0"
        },
        {
          "name": "IDBFactory must be primary interface of self.indexedDB",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of self.indexedDB",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: self.indexedDB must inherit property \"open(DOMString, unsigned long long)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: calling open(DOMString, unsigned long long) on self.indexedDB with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: self.indexedDB must inherit property \"deleteDatabase(DOMString)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: calling deleteDatabase(DOMString) on self.indexedDB with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: self.indexedDB must inherit property \"cmp(any, any)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBFactory interface: calling cmp(any, any) on self.indexedDB with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBDatabase is not EventTarget expected function \"function EventTarget() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBDatabase interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBDatabase interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: attribute name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: attribute version",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: attribute objectStoreNames",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: operation transaction([object Object],[object Object], IDBTransactionMode)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBDatabase interface: operation close()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBDatabase interface: operation createObjectStore(DOMString, IDBObjectStoreParameters)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBDatabase interface: operation deleteObjectStore(DOMString)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBDatabase interface: attribute onabort",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBDatabase interface: attribute onclose",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"onclose\" expected true got false"
        },
        {
          "name": "IDBDatabase interface: attribute onerror",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBDatabase interface: attribute onversionchange",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"onversionchange\" expected true got false"
        },
        {
          "name": "IDBObjectStore interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBObjectStore interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: attribute name",
          "status": "FAIL",
          "message": "assert_equals: setter must be function for PutForwards, Replaceable, or non-readonly attributes expected \"function\" but got \"undefined\""
        },
        {
          "name": "IDBObjectStore interface: attribute keyPath",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: attribute indexNames",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: attribute transaction",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: attribute autoIncrement",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"autoIncrement\" expected true got false"
        },
        {
          "name": "IDBObjectStore interface: operation put(any, any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation add(any, any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation delete(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation clear()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: operation get(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation getKey(any)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getKey\" missing"
        },
        {
          "name": "IDBObjectStore interface: operation getAll(any, unsigned long)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getAll\" missing"
        },
        {
          "name": "IDBObjectStore interface: operation getAllKeys(any, unsigned long)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getAllKeys\" missing"
        },
        {
          "name": "IDBObjectStore interface: operation count(any)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: operation openCursor(any, IDBCursorDirection)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBObjectStore interface: operation openKeyCursor(any, IDBCursorDirection)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"openKeyCursor\" missing"
        },
        {
          "name": "IDBObjectStore interface: operation index(DOMString)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation createIndex(DOMString, [object Object],[object Object], IDBIndexParameters)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 2 but got 0"
        },
        {
          "name": "IDBObjectStore interface: operation deleteIndex(DOMString)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBIndex interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBIndex interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: attribute name",
          "status": "FAIL",
          "message": "assert_equals: setter must be function for PutForwards, Replaceable, or non-readonly attributes expected \"function\" but got \"undefined\""
        },
        {
          "name": "IDBIndex interface: attribute objectStore",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: attribute keyPath",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: attribute multiEntry",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"multiEntry\" expected true got false"
        },
        {
          "name": "IDBIndex interface: attribute unique",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: operation get(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBIndex interface: operation getKey(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBIndex interface: operation getAll(any, unsigned long)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getAll\" missing"
        },
        {
          "name": "IDBIndex interface: operation getAllKeys(any, unsigned long)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"getAllKeys\" missing"
        },
        {
          "name": "IDBIndex interface: operation count(any)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: operation openCursor(any, IDBCursorDirection)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBIndex interface: operation openKeyCursor(any, IDBCursorDirection)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBKeyRange interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: attribute lower",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: attribute upper",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: attribute lowerOpen",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: attribute upperOpen",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: operation only(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBKeyRange interface: operation lowerBound(any, boolean)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBKeyRange interface: operation upperBound(any, boolean)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBKeyRange interface: operation bound(any, any, boolean, boolean)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 2 but got 0"
        },
        {
          "name": "IDBKeyRange interface: operation includes(any)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"includes\" missing"
        },
        {
          "name": "IDBKeyRange must be primary interface of IDBKeyRange.only(0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of IDBKeyRange.only(0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"lower\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"upper\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"lowerOpen\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"upperOpen\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"only(any)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: calling only(any) on IDBKeyRange.only(0) with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"lowerBound(any, boolean)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: calling lowerBound(any, boolean) on IDBKeyRange.only(0) with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"upperBound(any, boolean)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: calling upperBound(any, boolean) on IDBKeyRange.only(0) with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"bound(any, any, boolean, boolean)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: calling bound(any, any, boolean, boolean) on IDBKeyRange.only(0) with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBKeyRange interface: IDBKeyRange.only(0) must inherit property \"includes(any)\" with the proper type",
          "status": "FAIL",
          "message": "assert_inherits: property \"includes\" not found in prototype chain"
        },
        {
          "name": "IDBKeyRange interface: calling includes(any) on IDBKeyRange.only(0) with too few arguments must throw TypeError",
          "status": "FAIL",
          "message": "assert_inherits: property \"includes\" not found in prototype chain"
        },
        {
          "name": "IDBCursor interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBCursor interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: attribute source",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: attribute direction",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: attribute key",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: attribute primaryKey",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: operation advance(unsigned long)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBCursor interface: operation continue(any)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursor interface: operation continuePrimaryKey(any, any)",
          "status": "FAIL",
          "message": "assert_own_property: interface prototype object missing non-static operation expected property \"continuePrimaryKey\" missing"
        },
        {
          "name": "IDBCursor interface: operation update(any)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBCursor interface: operation delete()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursorWithValue interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBCursorWithValue is not IDBCursor expected function \"function IDBCursor() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBCursorWithValue interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBCursorWithValue interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursorWithValue interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursorWithValue interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBCursorWithValue interface: attribute value",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: existence and properties of interface object",
          "status": "FAIL",
          "message": "assert_equals: prototype of IDBTransaction is not EventTarget expected function \"function EventTarget() { [native code] }\" but got function \"function() {\n    [native code]\n}\""
        },
        {
          "name": "IDBTransaction interface object length",
          "status": "FAIL",
          "message": "assert_own_property: expected property \"length\" missing"
        },
        {
          "name": "IDBTransaction interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: attribute objectStoreNames",
          "status": "FAIL",
          "message": "assert_true: The prototype object must have a property \"objectStoreNames\" expected true got false"
        },
        {
          "name": "IDBTransaction interface: attribute mode",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: attribute db",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: attribute error",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: operation objectStore(DOMString)",
          "status": "FAIL",
          "message": "assert_equals: property has wrong .length expected 1 but got 0"
        },
        {
          "name": "IDBTransaction interface: operation abort()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "IDBTransaction interface: attribute onabort",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBTransaction interface: attribute oncomplete",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        },
        {
          "name": "IDBTransaction interface: attribute onerror",
          "status": "FAIL",
          "message": "assert_equals: setter length must be 1 expected 1 but got 0"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/interleaved-cursors.html",
      "subtests": [
        {
          "name": "1 cursors",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidAccessError\""
        },
        {
          "name": "10 cursors",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidAccessError\""
        },
        {
          "name": "100 cursors",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidAccessError\""
        },
        {
          "name": "500 cursors",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"InvalidAccessError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/key-conversion-exceptions.htm",
      "subtests": [
        {
          "name": "IDBFactory cmp() static with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: first key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter 1'), throwing_key('getter 2'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter 1\")"
        },
        {
          "name": "IDBCursor continue() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IndexedDB: Exceptions thrown during key conversion",
          "status": "FAIL",
          "message": "assert_throws: first key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter 1'), throwing_key('getter 2'));\n        }\" threw object \"TypeError: Object doesn't support property or method 'continuePrimaryKey'\" (\"TypeError\") expected object \"[object Object]\" (\"getter 1\")"
        },
        {
          "name": "IDBCursor update() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: throwing getter should rethrow during clone function \"() => {\n            cursor.update(value);\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBKeyRange only() static with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBKeyRange lowerBound() static with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBKeyRange upperBound() static with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBKeyRange bound() static with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: first key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter 1'), throwing_key('getter 2'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter 1\")"
        },
        {
          "name": "IDBObjectStore add() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            out_of_line[method]('value', throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBObjectStore put() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            out_of_line[method]('value', throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBObjectStore delete() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBObjectStore get() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBObjectStore getKey() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"TypeError: Object doesn't support property or method 'getKey'\" (\"TypeError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBObjectStore getAll() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"TypeError: Object doesn't support property or method 'getAll'\" (\"TypeError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBObjectStore getAllKeys() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"TypeError: Object doesn't support property or method 'getAllKeys'\" (\"TypeError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBObjectStore count() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBObjectStore openCursor() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBObjectStore openKeyCursor() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"TypeError: Object doesn't support property or method 'openKeyCursor'\" (\"TypeError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBIndex get() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBIndex getKey() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBIndex getAll() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"TypeError: Object doesn't support property or method 'getAll'\" (\"TypeError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBIndex getAllKeys() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"TypeError: Object doesn't support property or method 'getAllKeys'\" (\"TypeError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBIndex count() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBIndex openCursor() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        },
        {
          "name": "IDBIndex openKeyCursor() method with throwing/invalid keys",
          "status": "FAIL",
          "message": "assert_throws: key conversion with throwing getter should rethrow function \"() => {\n            receiver[method](throwing_key('getter'));\n        }\" threw object \"DataError\" (\"DataError\") expected object \"[object Object]\" (\"getter\")"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/key_invalid.htm",
      "subtests": [
        {
          "name": "Invalid key - true",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - false",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - null",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                objStore.add(\"value\", key);\n            }\" threw object \"Error: Invalid argument.\" that is not a DOMException DataError: property \"code\" is equal to undefined, expected 0"
        },
        {
          "name": "Invalid key - NaN",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - undefined",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - undefined2",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - function() {}",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - {}",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - { obj: 1 }",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - Math",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - window",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - {length:0,constructor:Array}",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - Array cloneâ€™s instance",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - Array (object)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - String (object)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - new String()",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                objStore.add(\"value\", key);\n            }\" did not throw"
        },
        {
          "name": "Invalid key - new Number()",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                objStore.add(\"value\", key);\n            }\" did not throw"
        },
        {
          "name": "Invalid key - new Boolean()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - [{}]",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - [[], [], [], [[ Date ]]]",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - [undefined]",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - [,1]",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - document.getElementsByTagName(\"script\")",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - new Date(NaN)",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                objStore.add(\"value\", key);\n            }\" did not throw"
        },
        {
          "name": "Invalid key - new Date(Infinity)",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                objStore.add(\"value\", key);\n            }\" did not throw"
        },
        {
          "name": "Invalid key - /foo/",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                objStore.add(\"value\", key);\n            }\" did not throw"
        },
        {
          "name": "Invalid key - new RegExp()",
          "status": "FAIL",
          "message": "assert_throws: function \"function () {\n                objStore.add(\"value\", key);\n            }\" did not throw"
        },
        {
          "name": "Invalid key - sparse array",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - sparse array 2",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - [[1], [3], [7], [[ sparse array ]]]",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - [1,2,3,,]",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - array directly contains self",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - array indirectly contains self",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid key - array member contains self",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/key_valid.html",
      "subtests": [
        {
          "name": "Valid key - new Date()",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - new Date(0)",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - []",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - new Array()",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - [\"undefined\"]",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - Infinity",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - -Infinity",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - 0",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - 1.5",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - 3e38",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - 3e-38",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - \"foo\"",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - \"\\n\"",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - \"\"",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - \"\\\"\"",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - \"\\u1234\"",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - \"\\u0000\"",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Valid key - \"NaN\"",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/keygenerator-constrainterror.htm",
      "subtests": [
        {
          "name": "Keygenerator ConstraintError when using same id as already generated",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/keygenerator-explicit.html",
      "subtests": [
        {
          "name": "Key generator vs. explicit key 53 bits",
          "status": "FAIL",
          "message": "assert_equals: Key generator should have returned failure expected \"ConstraintError\" but got \"InvalidAccessError\""
        },
        {
          "name": "Key generator vs. explicit key greater than 53 bits, less than 64 bits",
          "status": "FAIL",
          "message": "assert_equals: Key generator should have returned failure expected \"ConstraintError\" but got \"InvalidAccessError\""
        },
        {
          "name": "Key generator vs. explicit key greater than 53 bits, less than 64 bits (negative)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Key generator vs. explicit key 63 bits",
          "status": "FAIL",
          "message": "assert_equals: Key generator should have returned failure expected \"ConstraintError\" but got \"InvalidAccessError\""
        },
        {
          "name": "Key generator vs. explicit key 63 bits (negative)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Key generator vs. explicit key 64 bits",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "Key generator vs. explicit key 64 bits (negative)",
          "status": "FAIL",
          "message": "assert_unreached: deleteDatabase should succeed Reached unreachable code"
        },
        {
          "name": "Key generator vs. explicit key greater than 64 bits, but still finite",
          "status": "FAIL",
          "message": "assert_equals: Key generator should have returned failure expected \"ConstraintError\" but got \"InvalidAccessError\""
        },
        {
          "name": "Key generator vs. explicit key greater than 64 bits, but still finite (negative)",
          "status": "FAIL",
          "message": "assert_unreached: Transaction aborted: undefined Reached unreachable code"
        },
        {
          "name": "Key generator vs. explicit key equal to Infinity",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "Key generator vs. explicit key equal to -Infinity",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "ERROR",
      "message": "Test named 'Key generator vs. explicit key equal to -Infinity' specified 1 'cleanup' function, and 1 failed."
    },
    {
      "test": "/IndexedDB/keygenerator-inject.html",
      "subtests": [
        {
          "name": "Key is injected into value - single segment path",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Key is injected into value - multi-segment path",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Key is injected into value - multi-segment path, partially populated",
          "status": "PASS",
          "message": null
        },
        {
          "name": "put() throws if key cannot be injected - single segment path",
          "status": "PASS",
          "message": null
        },
        {
          "name": "put() throws if key cannot be injected - multi-segment path",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/keygenerator-overflow.htm",
      "subtests": [
        {
          "name": "Keygenerator overflow",
          "status": "FAIL",
          "message": "assert_equals: error name expected \"ConstraintError\" but got \"InvalidAccessError\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/keygenerator.htm",
      "subtests": [
        {
          "name": "Keygenerator - starts at one, and increments by one",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keygenerator - increments by one from last set key",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keygenerator - don't increment when new key is not bigger than current",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/keyorder.htm",
      "subtests": [
        {
          "name": "Database readback sort - String < Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - String < Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Database readback sort - float < String",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - float < String",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Database readback sort - float < Date",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - float < Date",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Database readback sort - float < Date < String < Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - float < Date < String < Array",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Database readback sort - Date(1 sec ago) < Date(now) < Date(1 minute in future)",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - Date(1 sec ago) < Date(now) < Date(1 minute in future)",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Database readback sort - -1.1 < 1 < 1.01337 < 1.013373 < 2",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - -1.1 < 1 < 1.01337 < 1.013373 < 2",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Database readback sort - -Infinity < -0.01 < 0 < Infinity",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - -Infinity < -0.01 < 0 < Infinity",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Database readback sort - \"\" < \"a\" < \"ab\" < \"b\" < \"ba\"",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - \"\" < \"a\" < \"ab\" < \"b\" < \"ba\"",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Database readback sort - Arrays",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - Arrays",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Database readback sort - Array.length: 10,000 < Array.length: 10,001",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - Array.length: 10,000 < Array.length: 10,001",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Database readback sort - Infinity inside arrays",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - Infinity inside arrays",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Database readback sort - Test different stuff at once",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "IDBKey.cmp sorted - Test different stuff at once",
          "status": "FAIL",
          "message": "DataError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/keypath-exceptions.htm",
      "subtests": [
        {
          "name": "The last element of keypath is validated",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Key path evaluation: Exceptions from non-enumerable getters",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Key path evaluation: Exceptions from enumerable getters",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Key path evaluation: Exceptions from non-enumerable getters on prototype",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "Key path evaluation: Exceptions from enumerable getters on prototype",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        },
        {
          "name": "Array key conversion should not invoke prototype getters",
          "status": "FAIL",
          "message": "assert_unreached: open should succeed Reached unreachable code"
        }
      ],
      "status": "ERROR",
      "message": "Test named 'Array key conversion should not invoke prototype getters' specified 1 'cleanup' function, and 1 failed."
    },
    {
      "test": "/IndexedDB/keypath-special-identifiers.htm",
      "subtests": [
        {
          "name": "IndexedDB: Special-cased identifiers in extracting keys from values (ES bindings)",
          "status": "FAIL",
          "message": "Function expected"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/keypath.htm",
      "subtests": [
        {
          "name": "Keypath - my.key",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - my.køi",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - my.key_ya",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - public.key$ya",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - true.$",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - my._",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - delete.a7",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - p.p.p.p.p.p.p.p.p.p.p.p.p.p",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - str.length",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - arr.length",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - length",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - '' uses value as key",
          "status": "FAIL",
          "message": "InvalidAccessError"
        },
        {
          "name": "Keypath - [''] uses value as [key]",
          "status": "FAIL",
          "message": "InvalidAccessError"
        },
        {
          "name": "Keypath - ['x', 'y']",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - [['x'], 'y'] (stringifies)",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - ['x', {toString->'y'}] (stringifies)",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - name,type",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - name,type.name",
          "status": "FAIL",
          "message": "DataError"
        },
        {
          "name": "Keypath - array loop -> stringify becomes ['']",
          "status": "FAIL",
          "message": "InvalidAccessError"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/keypath_invalid.htm",
      "subtests": [
        {
          "name": "Invalid keyPath - \"j a\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid keyPath - \".yo\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid keyPath - \"yo,lo\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - []",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" threw object \"InvalidAccessError\" that is not a DOMException SyntaxError: property \"code\" is equal to 15, expected 12"
        },
        {
          "name": "Invalid keyPath - [\"array with space\"]",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid keyPath - multidimensional array (invalid toString)",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"3m\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - {toString->3m}",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"my.1337\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"..yo\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid keyPath - \"y..o\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid keyPath - \"y.o.\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid keyPath - \"y.o..\"",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Invalid keyPath - \"m.*\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"\\\"m\\\"\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"m%\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"m/\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"m/a\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"m&\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"m!\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"*\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"*.*\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"^m\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        },
        {
          "name": "Invalid keyPath - \"/m/\"",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore with keyPath function \"function () {\n                    db.createObjectStore(store_name, { keyPath: keypath })\n                }\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/keypath_maxsize.htm",
      "subtests": [
        {
          "name": "Keypath - ~260 chars",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Keypath - ~530 chars",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Keypath - ~1050 chars",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/large-requests-abort.html",
      "subtests": [
        {
          "name": "small values",
          "status": "PASS",
          "message": null
        },
        {
          "name": "large values",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "large value followed by small values",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "large values mixed with small values",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/list_ordering.htm",
      "subtests": [
        {
          "name": "objectStoreNames and indexNames order - numbers",
          "status": "PASS",
          "message": null
        },
        {
          "name": "objectStoreNames and indexNames order - numbers 'overflow'",
          "status": "PASS",
          "message": null
        },
        {
          "name": "objectStoreNames and indexNames order - lexigraphical string sort",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/name-scopes.html",
      "subtests": [
        {
          "name": "Non-unique index keys",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Unique index keys",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/nested-cloning-large-multiple.html",
      "subtests": [
        {
          "name": "multiple requests of objects with blobs and large typed arrays",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "multiple requests of objects with blobs and large typed arrays with key generator",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/nested-cloning-large.html",
      "subtests": [
        {
          "name": "large typed array",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "blob with large typed array",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "blob with large typed array with key generator",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "array of blobs and large typed arrays",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "array of blobs and large typed arrays with key generator",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "object with blobs and large typed arrays",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "object with blobs and large typed arrays with key generator",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/nested-cloning-small.html",
      "subtests": [
        {
          "name": "small typed array",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "blob",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "blob with small typed array",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "blob with small typed array with key generator",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "blob array",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "blob array with key generator",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "array of blobs and small typed arrays",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "array of blobs and small typed arrays with key generator",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/objectstore_keyorder.htm",
      "subtests": [
        {
          "name": "Verify key sort order in an object store is 'number < Date < DOMString' ",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/open-request-queue.html",
      "subtests": [
        {
          "name": "Opens and deletes are processed in order",
          "status": "TIMEOUT",
          "message": "Test timed out"
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/IndexedDB/parallel-cursors-upgrade.html",
      "subtests": [
        {
          "name": "2 cursors",
          "status": "PASS",
          "message": null
        },
        {
          "name": "10 cursors",
          "status": "PASS",
          "message": null
        },
        {
          "name": "100 cursors",
          "status": "PASS",
          "message": null
        },
        {
          "name": "1000 cursors",
          "status": "PASS",
          "message": null
        },
        {
          "name": "10000 cursors",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/request-abort-ordering.html",
      "subtests": [
        {
          "name": "IndexedDB: request abort events are delivered in order",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/request-event-ordering.html",
      "subtests": [
        {
          "name": "small values",
          "status": "PASS",
          "message": null
        },
        {
          "name": "large values",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "large value followed by small values",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        },
        {
          "name": "large values mixed with small values",
          "status": "FAIL",
          "message": "promise_test: Unhandled rejection with value: object \"TypeError: Object doesn't support property or method 'getAll'\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/request_bubble-and-capture.htm",
      "subtests": [
        {
          "name": "Bubbling and capturing of request events",
          "status": "FAIL",
          "message": "assert_array_equals: events lengths differ, expected 11 got 9"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/string-list-ordering.htm",
      "subtests": [
        {
          "name": "Test string list ordering in IndexedDB",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction-abort-generator-revert.html",
      "subtests": [
        {
          "name": "The current number of a key generator is reverted when a versionchange transaction aborts",
          "status": "PASS",
          "message": null
        },
        {
          "name": "The current number of a key generator is reverted when a readwrite transaction aborts",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction-abort-index-metadata-revert.html",
      "subtests": [
        {
          "name": "Created stores get their indexes marked as deleted after the transaction that created them aborts",
          "status": "FAIL",
          "message": "assert_throws: IDBIndex.get should throw InvalidStateError, indicating that the index is marked for deletion, immediately after IDBTransaction.abort() returns function \"() => index.get('query')\" threw object \"TransactionInactiveError\" that is not a DOMException InvalidStateError: property \"code\" is equal to 0, expected 11"
        },
        {
          "name": "Deleted stores get their indexes marked as not-deleted after the transaction that deleted them aborts",
          "status": "FAIL",
          "message": "assert_array_equals: IDBObjectStore.indexNames should be empty immediately after IDBDatabase.deleteObjectStore() returns lengths differ, expected 0 got 2"
        },
        {
          "name": "Created+deleted stores still have their indexes marked as deleted after the transaction aborts",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "Created indexes get marked as deleted after their transaction aborts",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "Deleted indexes get marked as not-deleted after the transaction aborts",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "Created+deleted indexes are still marked as deleted after their transaction aborts",
          "status": "NOTRUN",
          "message": null
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction-abort-multiple-metadata-revert.html",
      "subtests": [
        {
          "name": "Deleted indexes in newly created stores are still marked as deleted after the transaction aborts",
          "status": "FAIL",
          "message": "Unable to get property 'length' of undefined or null reference"
        },
        {
          "name": "Deleted indexes in deleted stores are still marked as not-deleted after the transaction aborts",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "Deleted indexes in created+deleted stores are still marked as deleted after their transaction aborts",
          "status": "NOTRUN",
          "message": null
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction-abort-object-store-metadata-revert.html",
      "subtests": [
        {
          "name": "Created stores get marked as deleted after their transaction aborts",
          "status": "FAIL",
          "message": "Unable to get property 'length' of undefined or null reference"
        },
        {
          "name": "Deleted stores get marked as not-deleted after the transaction aborts",
          "status": "TIMEOUT",
          "message": "Test timed out"
        },
        {
          "name": "Created+deleted stores are still marked as deleted after their transaction aborts",
          "status": "NOTRUN",
          "message": null
        },
        {
          "name": "Un-instantiated deleted stores get marked as not-deleted after the transaction aborts",
          "status": "NOTRUN",
          "message": null
        }
      ],
      "status": "TIMEOUT",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction-abort-request-error.html",
      "subtests": [
        {
          "name": "Properties of error events fired at requests when aborting a transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction-create_in_versionchange.htm",
      "subtests": [
        {
          "name": "Attempt to create new transactions inside a versionchange transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction-deactivation-timing.html",
      "subtests": [
        {
          "name": "New transactions are deactivated before next task",
          "status": "FAIL",
          "message": "assert_false: Transaction should be inactive in next task expected false got true"
        },
        {
          "name": "New transactions are not deactivated until after the microtask checkpoint",
          "status": "PASS",
          "message": null
        },
        {
          "name": "New transactions from microtask are deactivated before next task",
          "status": "FAIL",
          "message": "assert_false: Transaction should be inactive in next task expected false got true"
        },
        {
          "name": "New transactions from microtask are still active through the microtask checkpoint",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Deactivation of new transactions happens at end of invocation",
          "status": "FAIL",
          "message": "assert_false: New transaction should be inactive in unrelated callback expected false got true"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction-lifetime-blocked.htm",
      "subtests": [
        {
          "name": "Blocked event",
          "status": "FAIL",
          "message": "assert_array_equals: lengths differ, expected 1 got 0"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction-lifetime-empty.html",
      "subtests": [
        {
          "name": "Transactions without requests complete in the expected order",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Multiple transactions without requests complete in the expected order",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction-lifetime.htm",
      "subtests": [
        {
          "name": "Test events opening a second database when one connection is open already",
          "status": "FAIL",
          "message": "assert_array_equals: lengths differ, expected 1 got 0"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction-requestqueue.htm",
      "subtests": [
        {
          "name": "Transactions have a request queue",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/transaction_bubble-and-capture.htm",
      "subtests": [
        {
          "name": "Capture and bubble",
          "status": "FAIL",
          "message": "assert_array_equals: events lengths differ, expected 11 got 9"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/upgrade-transaction-deactivation-timing.html",
      "subtests": [
        {
          "name": "Upgrade transactions are active in upgradeneeded callback",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Upgrade transactions are active in upgradeneeded callback and microtasks",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Upgrade transactions are deactivated before next task",
          "status": "FAIL",
          "message": "assert_false: Transaction should be inactive in next task expected false got true"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/upgrade-transaction-lifecycle-backend-aborted.html",
      "subtests": [
        {
          "name": "in the abort event handler for a transaction aborted due to an unhandled request error",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore exception should reflect that the transaction is no longer running function \"() => { database.createObjectStore('books2'); }\" threw object \"Error: Access is denied.\r\n\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "in a setTimeout(0) callback after the abort event is fired for a transaction aborted due to an unhandled request failure",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore exception should reflect that the transaction is no longer running function \"() => { database.createObjectStore('books2'); }\" threw object \"Error: Access is denied.\r\n\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/upgrade-transaction-lifecycle-committed.html",
      "subtests": [
        {
          "name": "in the complete event handler for a committed transaction",
          "status": "PASS",
          "message": null
        },
        {
          "name": "in a setTimeout(0) callback after the complete event is fired for a committed transaction",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/upgrade-transaction-lifecycle-user-aborted.html",
      "subtests": [
        {
          "name": "synchronously after abort() is called",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore exception should reflect that the transaction is still running function \"() => { database.createObjectStore('books2'); }\" threw object \"InvalidStateError\" that is not a DOMException TransactionInactiveError: property \"code\" is equal to 11, expected 0"
        },
        {
          "name": "in a promise microtask after abort() is called, before the transaction abort event is fired",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore exception should reflect that the transaction is still running function \"() => { database.createObjectStore('books2'); }\" threw object \"InvalidStateError\" that is not a DOMException TransactionInactiveError: property \"code\" is equal to 11, expected 0"
        },
        {
          "name": "in the abort event handler for a transaction aborted due to an abort() call",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore exception should reflect that the transaction is no longer running function \"() => { database.createObjectStore('books2'); }\" threw object \"Error: Access is denied.\r\n\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        },
        {
          "name": "in a setTimeout(0) callback after the abort event is fired for a transaction aborted due to an abort() call",
          "status": "FAIL",
          "message": "assert_throws: createObjectStore exception should reflect that the transaction is no longer running function \"() => { database.createObjectStore('books2'); }\" threw object \"Error: Access is denied.\r\n\" that is not a DOMException InvalidStateError: property \"code\" is equal to undefined, expected 11"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/value.htm",
      "subtests": [
        {
          "name": "Values - Date",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Values - Array",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/value_recursive.htm",
      "subtests": [
        {
          "name": "Recursive value - array directly contains self",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Recursive value - array indirectly contains self",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Recursive value - array member contains self",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/IndexedDB/writer-starvation.htm",
      "subtests": [
        {
          "name": "Writer starvation",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    }
  ]
}