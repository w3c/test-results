{
  "results": [
    {
      "test": "/uievents/constructors/inputevent-constructor.html",
      "subtests": [
        {
          "name": "InputEvent constructor without InputEventInit.",
          "status": "FAIL",
          "message": "Can't find variable: InputEvent"
        },
        {
          "name": "InputEvent construtor with InputEventInit where data is null",
          "status": "FAIL",
          "message": "Can't find variable: InputEvent"
        },
        {
          "name": "InputEvent construtor with InputEventInit where data is empty string",
          "status": "FAIL",
          "message": "Can't find variable: InputEvent"
        },
        {
          "name": "InputEvent construtor with InputEventInit where data is non empty string",
          "status": "FAIL",
          "message": "Can't find variable: InputEvent"
        },
        {
          "name": "InputEvent construtor with InputEventInit where targetRanges is non empty list",
          "status": "FAIL",
          "message": "Can't find variable: StaticRange"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/uievents/interface/click-event.htm",
      "subtests": [
        {
          "name": "synthetic click event is a MouseEvent",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/uievents/legacy-domevents-tests/approved/ProcessingInstruction.DOMCharacterDataModified.html",
      "subtests": [
        {
          "name": "Test Description: DOMCharacterDataModified event fires after ProcessingInstruction.data have been modified, but the node itself has not been inserted or deleted. The proximal event target of this event shall be the ProcessingInstruction node.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/uievents/legacy-domevents-tests/approved/dispatchEvent.click.checkbox.html",
      "subtests": [
        {
          "name": "Checkbox state is unchanged before the synthetic click event is dispatched",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test Description: MouseEvent: Default action is performed when a synthetic click event is dispatched on a checkbox element",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/uievents/legacy-domevents-tests/approved/domnodeinserted.html",
      "subtests": [
        {
          "name": "Test Description: DOMNodeInserted event fires when a node has been added as a child of another node.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/uievents/legacy-domevents-tests/approved/stopImmediatePropagation.effect.html",
      "subtests": [
        {
          "name": "Test Description: stopImmediatePropagation() prevents other event listeners from being triggered and, unlike Event.stopPropagation(), its effect must be immediate. Once it has been called, further calls to this method have no additional effect.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/uievents/legacy-domevents-tests/approved/stopPropagation.deferred.effect.html",
      "subtests": [
        {
          "name": "Test Description: stopPropagation() prevents other event listeners from being triggered but its effect must be deferred until all event listeners attached on the Event.currentTarget have been triggered.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/uievents/legacy-domevents-tests/submissions/Microsoft/converted/EventListener.dispatch.new.event.html",
      "subtests": [
        {
          "name": "Test Description: Implementations of the DOM event model must be reentrant. Event listeners may perform actions that cause additional events to be dispatched. Such events are handled in a synchronous manner, the event propagation that causes the event listener to be triggered must resume only after the event dispatch of the new event is completed.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/uievents/order-of-events/focus-events/focus-automated-blink-webkit.html",
      "subtests": [
        {
          "name": "Focus-related events should fire in the correct order (same DocumentOwner)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Focus-related events should fire in the correct order (different DocumentOwner)",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    }
  ]
}