{
  "ua": [
    "EM01",
    "IC01",
    "MO01",
    "MO02"
  ],
  "results": {
    "/annotation-model/annotations/annotationAgentOptionals-manual.html": {
      "byUA": {
        "EM01": "OK",
        "IC01": "OK",
        "MO01": "OK",
        "MO02": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 4
      },
      "subtests": {
        "1:1 Implements Annotation-level creator (Agent) **_id_ key** with **single value** that is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.creator should have required property 'id', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.creator should have required property 'id', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.creator should have required property 'id', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: Id for Annotation Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.creator should have required property 'id', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:2 Implements Annotation-level generator (Agent) **_id_ key** with **single value** that is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:3 Implements Annotation-level creator (Agent) **_type_ key** with one or more values from **model-recommended list (Person, Organization, Software)** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:4 Implements Annotation-level generator (Agent) **_type_ key** with one or more values from **model-recommended list (Person, Organization, Software)** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:5 Implements Annotation-level creator (Agent) **_nickname_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.creator should have required property 'nickname', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.creator should have required property 'nickname', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.creator should have required property 'nickname', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: Nickname for Annotation Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.creator should have required property 'nickname', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:6 Implements Annotation-level generator (Agent) **_nickname_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.generator should have required property 'nickname', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.generator should have required property 'nickname', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.generator should have required property 'nickname', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: Nickname for Annotation Generator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.generator should have required property 'nickname', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:7 Implements Annotation-level creator (Agent) **_name_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:8 Implements Annotation-level generator (Agent) **_name_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:9 Implements Annotation-level creator (Agent) **_name_ key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:10 Implements Annotation-level generator (Agent) **_name_ key** with one or more values. [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:11 Implements Annotation-level creator (Agent) **_email_ key** with one or more values, each of which is a **mailto: uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:12 Implements Annotation-level generator (Agent) **_email_ key** with one or more values, each of which is a **mailto: uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; Errors: data.generator should have required property 'email', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; Errors: data.generator should have required property 'email', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; Errors: data.generator should have required property 'email', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Email for Annotation Generator (Agent) not found. Agents may have one or more email values.; Errors: data.generator should have required property 'email', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:13 Implements Annotation-level creator (Agent) **email_sha1 key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.creator should have required property 'email_sha1', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.creator should have required property 'email_sha1', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.creator should have required property 'email_sha1', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.creator should have required property 'email_sha1', data.creator should be array, data.creator should NOT be valid, data.creator should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:14 Implements Annotation-level generator (Agent) **email_sha1 key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.generator should have required property 'email_sha1', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.generator should have required property 'email_sha1', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.generator should have required property 'email_sha1', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Email_sha1 for Annotation Generator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.generator should have required property 'email_sha1', data.generator should be array, data.generator should NOT be valid, data.generator should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:15 Implements Annotation-level creator (Agent) **_homepage_ key** with one or more values, each of which is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:16 Implements Annotation-level generator (Agent) **_homepage_ key** with one or more values, each of which is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        }
      }
    },
    "/annotation-model/annotations/annotationMusts-manual.html": {
      "byUA": {
        "EM01": "OK",
        "IC01": "OK",
        "MO01": "OK",
        "MO02": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 4
      },
      "subtests": {
        "1:1 Annotation has **_@context_ key** and '**http://www.w3.org/ns/anno.jsonld**' is **a value of _@context_** - [model 3.1](https://www.w3.org/TR/annotation-model/#annotations)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:2 Annotation has **_id_ key** which has a **single value** that is a **string of format uri** - [model 3.1](https://www.w3.org/TR/annotation-model/#annotations)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:3 Annotation has **_type_ key** and '**Annotation**' is **a value of _type_** - [model 3.1](https://www.w3.org/TR/annotation-model/#annotations)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:4 Annotation has a **_target_ key** - [model 3.1](https://www.w3.org/TR/annotation-model/#annotations)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:5 Each **_target_** is one of a **string of format uri**, an **External Web Resource**, a **Choice** or **Set**, or a **Specific Resource** - [model 3.2](https://www.w3.org/TR/annotation-model/#bodies-and-targets), [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:6 Annotation has a **_body_ key**, or a **_bodyValue_ key**, or **neither**, but **NEVER both** - [model 3.2.5](https://www.w3.org/TR/annotation-model/#string-body)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:7 If present, each **_body_** is one of a **string of format uri**, an **External Web Resource**, an **Embedded Textual Body**, a **Choice** or **Set**, or a **Specific Resource** - [model 3.2](https://www.w3.org/TR/annotation-model/#bodies-and-targets), [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "FAIL",
            "MO02": "PASS"
          },
          "UAmessage": {
            "MO01": "assert_true: ERROR: One or more Bodies of the Annotation is not one of a string of format uri, an External Web Resource, a Choice or Set, a Specific Resource.; Errors: data.body should be string, data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should be array, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 3,
            "FAIL": 1
          }
        },
        "1:8 If present the **_bodyValue_ key** has a **single value** that is a **string** - [model 3.2.5](https://www.w3.org/TR/annotation-model/#string-body)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:9 If present the Annotation-level **_created_ key** has a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:10 If present the Annotation-level **_modified_ key** has a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:11 If present the Annotation-level **_generated_ key** has a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:12 If present the Annotation-level **_rights_ key** has values that are all **strings of format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:13 If present the Annotation-level **_canonical_ key** has a **single value** that is a **string of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:14 If present the Annotation-level **_via_ key** has values that are all **strings of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        }
      }
    },
    "/annotation-model/annotations/annotationOptionals-manual.html": {
      "byUA": {
        "EM01": "OK",
        "IC01": "OK",
        "MO01": "OK",
        "MO02": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 4
      },
      "subtests": {
        "1:1 Implements **_body_ key** - [model 3.1](https://www.w3.org/TR/annotation-model/#annotations)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:2 Implements Annotation-level **_creator_ key** with a **single value** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:3 Implements Annotation-level **_created_ key** which has a **single value** that is a **string of format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:4 Implements **_motivation_ key** with a **single value** that is from the **model's list of Motivations** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "MO01": "assert_true: WARNING:   Annotation SHOULD have a motivation key with a single value from model motivation ontology.; Errors: data.motivation should be equal to one of the allowed values, data.motivation should be array, data.motivation should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING:   Annotation SHOULD have a motivation key with a single value from model motivation ontology.; Errors: data.motivation should be equal to one of the allowed values, data.motivation should be array, data.motivation should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 2,
            "FAIL": 2
          }
        },
        "1:5 Implements **_bodyValue_ key** which has a **single value** that is a **string** [model 3.2.5](https://www.w3.org/TR/annotation-model/#string-body)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; Errors: data should have required property 'bodyValue'; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; Errors: data should have required property 'bodyValue'; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; Errors: data should have required property 'bodyValue'; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: bodyValue key not found. Annotation May have exactly one bodyValue (if no body also included).; Errors: data should have required property 'bodyValue'; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:6 Implements **_creator_ key** which has one or more values, each of which is a **string of format uri** or an **object** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:7 Implements **_generator_ key** which has one or more values, each of which is a **string of format uri** or an **object** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information).": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:8 Implements Annotation-level **_generated_ key** which has a **single value** that is a **string of format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; Errors: data should have required property 'generated'; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; Errors: data should have required property 'generated'; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; Errors: data should have required property 'generated'; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Valid Annotation-level generated key not found. Annotation may have zero or exactly one generated key value.; Errors: data should have required property 'generated'; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:9 Implements Annotation-level **_modified_ key** which has a **single value** that is a **string of format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; Errors: data should have required property 'modified'; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; Errors: data should have required property 'modified'; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; Errors: data should have required property 'modified'; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Valid Annotation-level modified key not found. Annotation may have zero or exactly one modified key value.; Errors: data should have required property 'modified'; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:10 Implements **_audience_ key** which has one or more values with each audience instance described using **[schema.org/Audience](http://schema.org/Audience) classes and properties** - [model 3.3.3](https://www.w3.org/TR/annotation-model/#intended-audience)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; Errors: data should have required property 'audience'; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; Errors: data should have required property 'audience'; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; Errors: data should have required property 'audience'; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: audience key not found. An Annotation may have one or more audience values.; Errors: data should have required property 'audience'; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:11 Implements **_motivation_ key** which has one or more values, each of which is from the **model's list of Motivations** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "MO01": "assert_true: INFORMATIONAL: motivation key with value from model motivation list not found. Annotation may have zero or more motivations with values drawn from model ontology.; Errors: data.motivation should be equal to one of the allowed values, data.motivation should be array, data.motivation should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: motivation key with value from model motivation list not found. Annotation may have zero or more motivations with values drawn from model ontology.; Errors: data.motivation should be equal to one of the allowed values, data.motivation should be array, data.motivation should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 2,
            "FAIL": 2
          }
        },
        "1:12 Implements Annotation-level **_rights_** key which has one or more values, each of which is a **string of format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; Errors: data should have required property 'rights'; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; Errors: data should have required property 'rights'; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; Errors: data should have required property 'rights'; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Annotatoin-level rights key having string value(s) of format uri not found. Annotation may have zero or more rights key values.; Errors: data should have required property 'rights'; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:13 Implements Annotation-level **_canonical_ key** which has a single value that is a **string of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; Errors: data should have required property 'canonical'; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; Errors: data should have required property 'canonical'; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; Errors: data should have required property 'canonical'; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: canonical key having a single string value of format uri not found. Annotation may have canonical key with exactly one value.; Errors: data should have required property 'canonical'; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:14 Implements Annotation-level **_via_ key** which has one or more values, each of which is a **string of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; Errors: data should have required property 'via'; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; Errors: data should have required property 'via'; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; Errors: data should have required property 'via'; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Annotation-level via key with string(s) of format uri as value(s) not found. Annotation may have via key with one or more values.; Errors: data should have required property 'via'; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:15 Implements **_stylesheet_ key** which has a **single value** that is an **object or string of format uri**. [model 4.4](https://www.w3.org/TR/annotation-model/#styles)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; Errors: data should have required property 'stylesheet'; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; Errors: data should have required property 'stylesheet'; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; Errors: data should have required property 'stylesheet'; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: stylesheet key with exactly one value not found. Annotation may have stylesheet key with exactly one value.; Errors: data should have required property 'stylesheet'; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        }
      }
    },
    "/annotation-model/annotations/annotationSingleAssertion-manual.html": {
      "byUA": {
        "EM01": "OK",
        "IC01": "OK",
        "MO01": "OK",
        "MO02": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 4
      },
      "subtests": {
        "1:1 If present, each **_body_** is one of a **string of format uri**, an **External Web Resource**, an **Embedded Textual Body**, a **Choice** or **Set**, or a **Specific Resource** - [model 3.2](https://www.w3.org/TR/annotation-model/#bodies-and-targets), [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "FAIL",
            "MO02": "PASS"
          },
          "UAmessage": {
            "MO01": "assert_true: ERROR: One or more Bodies of the Annotation is not one of a string of format uri, an External Web Resource, a Choice or Set, a Specific Resource.; Errors: data.body should be string, data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should be array, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 3,
            "FAIL": 1
          }
        }
      }
    },
    "/annotation-model/bodiesTargets/bodyMusts-manual.html": {
      "byUA": {
        "EM01": "OK",
        "IC01": "OK",
        "MO01": "OK",
        "MO02": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 4
      },
      "subtests": {
        "1:1 If present, each **_body_** is one of a **string of format uri**, an **External Web Resource**, an **Embedded Textual Body**, a **Choice** or **Set**, or a **Specific Resource** - [model 3.2](https://www.w3.org/TR/annotation-model/#bodies-and-targets), [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "FAIL",
            "MO02": "PASS"
          },
          "UAmessage": {
            "MO01": "assert_true: ERROR: One or more Bodies of the Annotation is not one of a string of format uri, an External Web Resource, a Choice or Set, a Specific Resource.; Errors: data.body should be string, data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should be array, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "PASS": 3,
            "FAIL": 1
          }
        },
        "1:2 If present as a body or body/source property, the **_textDirection_ key** has a **single value** which is **one of 'ltr', 'rtl', 'auto'** - [model 3.2.1](https://www.w3.org/TR/annotation-model/#external-web-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:3 If present all body-level or body/source-level **_created_ keys** have a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:4 If present all body-level or body/source-level **_modified_ keys** have a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:5 If present all body-level or body/source-level **_rights_ key values** are strings of **format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:6 If present all body-level or body/source-level **_canonical_ keys** have a **single value** which is a string of **format uri** - [model 3.3.](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:7 If present all body-level or body/source-level **_via_ key values** are strings of **format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:8 If an **External Web Resource** is a body, it does NOT have an **_items_ key** - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-bodies-and-targets)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:9 If an **External Web Resource** is a body, it does NOT have an **_purpose_ key** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:10 If a **Choice or Set** is a body, it does NOT have a **_value_ key** - [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-body)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:11 If a **Choice or Set** is a body, it does NOT have a **_source_ key** - [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:12 If a **Choice or Set** is a body, it does NOT have a **_purpose_ key** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:13 If an **Embedded Textual Body** is a body, it does NOT have an **_items_ key** - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-bodies-and-targets)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:14 If an **Embedded Textual Body** is a body, it does NOT have a **_source_ key** - [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:15 If a **Specific Resource** is a body, it does NOT have an **_items_ key** - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-bodies-and-targets)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:16 If a **Specific Resource** is a body, it does NOT have a **_value_ key** - [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        }
      }
    },
    "/annotation-model/bodiesTargets/bodyOptionals-manual.html": {
      "byUA": {
        "EM01": "OK",
        "IC01": "OK",
        "MO01": "OK",
        "MO02": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 4
      },
      "subtests": {
        "1:1 Implements **body _format_ key** with a **single value** that is a **media type** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "PASS"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: The description of a Body should include format key with a single value that is a media type.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: The description of a Body should include format key with a single value that is a media type.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: The description of a Body should include format key with a single value that is a media type.; Errors: data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 3,
            "PASS": 1
          }
        },
        "1:2 Implements **body _language_ key** with a **single value** that is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "PASS"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: The description of a Body should include language key with a single value that is a language code.; Errors: data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 3,
            "PASS": 1
          }
        },
        "1:3 Implements **body _creator_ key** with a **single value**  [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: The description of a body should include creator key with a single value.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: The description of a body should include creator key with a single value.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: The description of a body should include creator key with a single value.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'creator', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: The description of a body should include creator key with a single value.; Errors: data.body should have required property 'creator', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:4 Implements **body _created_ key** with a **single value** that is of **format date-time** [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'created', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: The description of a body should include created key with a single value that is of format date-time.; Errors: data.body should have required property 'created', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:5 Implements **Embedded Textual Body _type_ key** which includes a value of **TextualBody** [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-body)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "PASS"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; Errors: data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; Errors: data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: The description of an Embedded Textual Body should include type key which includes the value of TextualBody.; Errors: data.body should have required property 'value', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 3,
            "PASS": 1
          }
        },
        "1:6 Implements **External Web Resource** with **_id_ key** as a body of the Annotation  [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: An External Web Resource body may be used as an Annotation Body.; Errors: data.body should NOT be valid, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: An External Web Resource body may be used as an Annotation Body.; Errors: data.body should NOT be valid, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 2,
            "PASS": 2
          }
        },
        "1:7 Implements **Embedded Textual Body** with **_value_ key** as a body of the Annotation  [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-body)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: An Embedded Textual Body may be used as an Annotation Body.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: An Embedded Textual Body may be used as an Annotation Body.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 2,
            "PASS": 2
          }
        },
        "1:8 Implements **Choice** with **_type_ and _items_ keys** as a body of the Annotation  [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:9 Implements **List** with **_type_ and _items_ keys** as a body of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:10 Implements **Composite** with **_type_ and _items_ keys** as a body of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:11 Implements **Independents** with **_type_ and _items_ keys** as a body of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Body (not found).; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body should have required property 'items', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:12 Implements **Specific Resource** with **_source_ and at least one of _purpose, selector, state, style, renderedVia, scope_ keys** as a body of the Annotation  [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; Errors: data.body should have required property 'source', data.body should have required property 'items', data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Body (not found).; Errors: data.body should have required property 'source', data.body should have required property 'items', data.body should NOT be valid, data.body should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:13 Implements **body _format_ key** with one or more values each of which is a **media type** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "PASS"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a body may include format key with one or more values that are each a media type.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a body may include format key with one or more values that are each a media type.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a body may include format key with one or more values that are each a media type.; Errors: data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 3,
            "PASS": 1
          }
        },
        "1:14 Implements **body _language_ key** with one or more values each of which is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "PASS"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a body may include language key with one or more values that are each a language code.; Errors: data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 3,
            "PASS": 1
          }
        },
        "1:15 Implements **body _creator_ key** with one or more values - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'creator', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a body may include creator key with one or more values.; Errors: data.body should have required property 'creator', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:16 Implements **body _type_ key** with one or more values each of which is drawn from the **model's list of resource classes** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Body may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:17 Implements **body _processingLanguage_ key** with a **single value** that is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; Errors: data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'processingLanguage', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Body may include processingLanguage key with a single value that is a language code.; Errors: data.body should have required property 'processingLanguage', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:18 Implements **body _textDirection_ key** with a **single value** that is is **one of ltr, rtl, or auto** [model 3.2.1](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'textDirection', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Body may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.body should have required property 'textDirection', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:19 Implements **body _modified_ key** with a **single value** that is of **format date-time** [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'modified', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a body may include modified key with a single value that is of format date-time.; Errors: data.body should have required property 'modified', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:20 Implements **body _audience_ key** which has one or more values with each audience instance described using **[schema.org/Audience](http://schema.org/Audience) classes and properties** - [model 3.3.3](https://www.w3.org/TR/annotation-model/#intended-audience)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'audience', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a body may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.body should have required property 'audience', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:21 Implements **body _accessibility_ key** which has one or more values - [model 3.3.4](#https://www.w3.org/TR/annotation-model/#accessibility-of-content)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; Errors: data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; Errors: data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'accessibility', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Body may include accessibility key which has one or more values.; Errors: data.body should have required property 'accessibility', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:22 Implements **body _purpose_ key** with one or more values are each drawn from **model's list of Motivations** [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.body should have required property 'source', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'purpose', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Body may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.body should have required property 'purpose', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:23 Implements **body _rights_ key** which has one or more values, each of which is a **string of format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'rights', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a body may include rights key with one or more values each of format uri.; Errors: data.body should have required property 'rights', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:24 Implements **body _canonical_ key** with a **single value** that is of **format uri** [model 3.3.7](https://www.w3.org/TR/annotation-model/#bodies-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'canonical', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a body rresource may include canonical key with a single value that is of format uri.; Errors: data.body should have required property 'canonical', data.body should have required property 'items', data.body should have required property 'source', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:25 Implements **body _via_ key** which has one or more values, each of which is a **string of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; Errors: data.body should be object, data.body should be object, data.body should NOT be valid, data.body should be object, data.body should be object, data.body should be object, data.body should match exactly one schema in oneOf, data.body should be object, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'source', data.body should have required property 'id', data.body should have required property 'value', data.body should match exactly one schema in oneOf, data.body should have required property 'via', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a body resource may include via key with one or more values that are each of format uri.; Errors: data.body should have required property 'via', data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:26 Implements **Specific Resource body _styleClass_ key** which has one or more values - [model 4.4](https://www.w3.org/TR/annotation-model/#styles)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Specific Resource body  may include styleClass key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Specific Resource body  may include styleClass key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Specific Resource body  may include styleClass key with one or more values.; Errors: data.body should have required property 'source', data.body should have required property 'styleClass', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Specific Resource body  may include styleClass key with one or more values.; Errors: data.body should have required property 'source', data.body should have required property 'styleClass', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:27 Implements **Specific Resource body _renderedVia_ key** which has one or more values - [model 4.5](https://www.w3.org/TR/annotation-model/#rendering-software)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Specific Resource body  may include renderedVia key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Specific Resource body  may include renderedVia key with one or more values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Specific Resource body  may include renderedVia key with one or more values.; Errors: data.body should have required property 'source', data.body should have required property 'renderedVia', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Specific Resource body  may include renderedVia key with one or more values.; Errors: data.body should have required property 'source', data.body should have required property 'renderedVia', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:28 Implements **Embedded Textual Body _type_ key** which includes a value of **Text** [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-body)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; Errors: data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; Errors: data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; Errors: data.body should have required property 'value', data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of an Embedded Textual Body should include type key which includes the value of Text.; Errors: data.body.type should be equal to one of the allowed values, data.body.type should be string, data.body.type should NOT be valid, data.body.type should match exactly one schema in oneOf, data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        }
      }
    },
    "/annotation-model/bodiesTargets/bodyTargAgentOptionals-manual.html": {
      "byUA": {
        "EM01": "OK",
        "IC01": "OK",
        "MO01": "OK",
        "MO02": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 4
      },
      "subtests": {
        "1:1 Implements Body-level creator (Agent) **_id_ key** with **single value** that is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: Id for Body Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:2 Implements Target-level creator (Agent) **_id_ key** with **single value** that is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: Id for Target Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: Id for Target Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: Id for Target Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: Id for Target Creator (Agent) not found or more than 1 found. Agents should have exactly one id of format uri.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:3 Implements Body-level creator (Agent) **_type_ key** with one or more values from **model-recommended list (Person, Organization, Software)** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: Type (Person, Organization, Software) for Body Creator (Agent) not found. Agents should have one or more type values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:4 Implements Target-level creator (Agent) **_type_ key** with one or more values from **model-recommended list (Person, Organization, Software)** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: Type (Person, Organization, Software) for Target Creator (Agent) not found. Agents should have one or more type values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: Type (Person, Organization, Software) for Target Creator (Agent) not found. Agents should have one or more type values.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: Type (Person, Organization, Software) for Target Creator (Agent) not found. Agents should have one or more type values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: Type (Person, Organization, Software) for Target Creator (Agent) not found. Agents should have one or more type values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:5 Implements Body-level creator (Agent) **_nickname_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: Nickname for Body Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:6 Implements Target-level creator (Agent) **_nickname_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: Nickname for Target Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: Nickname for Target Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: Nickname for Target Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: Nickname for Target Creator (Agent) not found. Agents should have exactly one nickname value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:7 Implements Body-level creator (Agent) **_name_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: Single name for Body Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:8 Implements Target-level creator (Agent) **_name_ key** with a **single value** that is a string - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: Single name for Target Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: Single name for Target Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: Single name for Target Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: Single name for Target Creator (Agent) not found. Agents should have exactly one name value.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:9 Implements Body-level creator (Agent) **_name_ key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Name for Body Creator (Agent) not found. Agents may have one or more name values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:10 Implements Target-level creator (Agent) **_name_ key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Name for Target Creator (Agent) not found. Agents may have one or more name values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Name for Target Creator (Agent) not found. Agents may have one or more name values.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Name for Target Creator (Agent) not found. Agents may have one or more name values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Name for Target Creator (Agent) not found. Agents may have one or more name values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:11 Implements Body-level creator (Agent) **_email_ key** with one or more values, each of which is a **mailto: uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Email for Body Creator (Agent) not found. Agents may have one or more email values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:12 Implements Target-level creator (Agent) **_email_ key** with one or more values, each of which is a **mailto: uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Email for Target Creator (Agent) not found. Agents may have one or more email values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Email for Target Creator (Agent) not found. Agents may have one or more email values.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Email for Target Creator (Agent) not found. Agents may have one or more email values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Email for Target Creator (Agent) not found. Agents may have one or more email values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:13 Implements Body-level creator (Agent) **email_sha1 key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Email_sha1 for Body Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:14 Implements Target-level creator (Agent) **email_sha1 key** with one or more values - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Email_sha1 for Target Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Email_sha1 for Target Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Email_sha1 for Target Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Email_sha1 for Target Creator (Agent) not found. Agents may have one or more email_sha1 values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:15 Implements Body-level creator (Agent) **_homepage_ key** with one or more values, each of which is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.body should be object, data.body should be object, data.body should be object, data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Homepage for Body Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.body should have required property 'creator', data.body should have required property 'source', data.body should have required property 'items', data.body should match some schema in anyOf, data.body should NOT be valid, data.body should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:16 Implements Target-level creator (Agent) **_homepage_ key** with one or more values, each of which is a **string of format uri** - [model 3.2.2](https://www.w3.org/TR/annotation-model/#agents)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: Homepage for Target Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: Homepage for Target Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.target should have required property 'creator', data.target.source should be object, data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: Homepage for Target Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: Homepage for Target Creator (Agent) not found. Agents may have one or more homepage values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        }
      }
    },
    "/annotation-model/bodiesTargets/targetMusts-manual.html": {
      "byUA": {
        "EM01": "OK",
        "IC01": "OK",
        "MO01": "OK",
        "MO02": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 4
      },
      "subtests": {
        "1:1 Each **_target_** is one of a **string of format uri**, an **External Web Resource**, a **Choice** or **Set**, or a **Specific Resource** - [model 3.2](https://www.w3.org/TR/annotation-model/#bodies-and-targets), [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:2 If present as a target or target/source property, the **_textDirection_ key** has a **single value** which is **one of 'ltr', 'rtl', 'auto'** - [model 3.2.1](https://www.w3.org/TR/annotation-model/#external-web-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:3 If present all target-level or target/source-level **_created_ keys** have a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:4 If present all target-level or target/source-level **_modified_ keys** have a **single value** that is of **format date-time** - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:5 If present all target-level or target/source-level **_rights_ key values** are strings of **format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:6 If present all target-level or target/source-level **_canonical_ keys** have a **single value** which is a string of **format uri** - [model 3.3.](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:7 If present all target-level or target/source-level **_via_ key values** are strings of **format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:8 If an **External Web Resource** is a target, it does NOT have an **_items_ key** - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-targets-and-targets)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:9 If an **External Web Resource** is a target, it does NOT have an **_purpose_ key** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:10 If a **Choice or Set** is a target, it does NOT have a **_value_ key** - [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-targ)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:11 If a **Choice or Set** is a target, it does not have a **_source_ key** - [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:12 If a **Choice or Set** is a target, it does NOT have a **_purpose_ key** - [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:13 If a **Specific Resource Target** is a target, it does NOT have an **_items_ key** - [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-targets-and-targets)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:14 If a **Specific Resource** is a target, it does NOT have a **_value_ key** - [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        },
        "1:15 Neither **target** Resources nor target Choice or Set items have a **_type_ key** which includes a value of **TextualBody** [model 3.2.4](https://www.w3.org/TR/annotation-model/#embedded-textual-body)": {
          "byUA": {
            "EM01": "PASS",
            "IC01": "PASS",
            "MO01": "PASS",
            "MO02": "PASS"
          },
          "UAmessage": {},
          "totals": {
            "PASS": 4
          }
        }
      }
    },
    "/annotation-model/bodiesTargets/targetOptionals-manual.html": {
      "byUA": {
        "EM01": "OK",
        "IC01": "OK",
        "MO01": "OK",
        "MO02": "OK"
      },
      "UAmessage": {},
      "totals": {
        "OK": 4
      },
      "subtests": {
        "1:1 Implements **target _format_ key** with a **single value** that is a **media type** [model 3.2.1](https://www.w3.org/TR/annotation-model/#targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: The description of a Target should include format key with a single value that is a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: The description of a Target should include format key with a single value that is a media type.; Errors: data.target should have required property 'format', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: The description of a Target should include format key with a single value that is a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: The description of a Target should include format key with a single value that is a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:2 Implements **target _language_ key** with a **single value** that is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: The description of a Target should include language key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: The description of a Target should include language key with a single value that is a language code.; Errors: data.target should have required property 'language', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: The description of a Target should include language key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: The description of a Target should include language key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:3 Implements **target _creator_ key** with a **single value**  [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: The description of a target should include creator key with a single value.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: The description of a target should include creator key with a single value.; Errors: data.target should have required property 'creator', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: The description of a target should include creator key with a single value.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: The description of a target should include creator key with a single value.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:4 Implements **target _created_ key** with a **single value** that is of **format date-time** [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: WARNING: The description of a target should include created key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: WARNING: The description of a target should include created key with a single value that is of format date-time.; Errors: data.target should have required property 'created', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: WARNING: The description of a target should include created key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: WARNING: The description of a target should include created key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:5 Implements **External Web Resource** with **_id_ key** as a target of the Annotation  [model 3.2.1](https://www.w3.org/TR/annotation-model/#targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "PASS",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: An External Web Resource target may be used as an Annotation Target.; Errors: data.target should NOT be valid, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should NOT be valid, data.target should match some schema in anyOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: An External Web Resource target may be used as an Annotation Target.; Errors: data.target should NOT be valid, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should NOT be valid, data.target should match some schema in anyOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: An External Web Resource target may be used as an Annotation Target.; Errors: data.target should NOT be valid, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should NOT be valid, data.target should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 3,
            "PASS": 1
          }
        },
        "1:6 Implements **Choice** with **_type_ and _items_ keys** as a target of the Annotation  [model 3.2.7](https://www.w3.org/TR/annotation-model/#choice-of-targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: A Choice resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:7 Implements **List** with **_type_ and _items_ keys** as a target of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: A List resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:8 Implements **Composite** with **_type_ and _items_ keys** as a target of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: A Composite resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:9 Implements **Independents** with **_type_ and _items_ keys** as a target of the Annotation  [model 3.2.8](https://www.w3.org/TR/annotation-model/#sets-of-targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Target (not found).; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: A Independents resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:10 Implements **Specific Resource** with **_source_ and at least one of _purpose, selector, state, style, renderedVia, scope_ keys** as a target of the Annotation  [model 4](https://www.w3.org/TR/annotation-model/#specific-resources)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "PASS",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match some schema in anyOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match some schema in anyOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: A Specific Resource may be used as an Annotation Target (not found).; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should match some schema in anyOf; expected true got false"
          },
          "totals": {
            "FAIL": 3,
            "PASS": 1
          }
        },
        "1:11 Implements **target _format_ key** with one or more values each of which is a **media type** [model 3.2.1](https://www.w3.org/TR/annotation-model/#targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a target may include format key with one or more values that are each a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a target may include format key with one or more values that are each a media type.; Errors: data.target should have required property 'format', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a target may include format key with one or more values that are each a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a target may include format key with one or more values that are each a media type.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:12 Implements **target _language_ key** with one or more values each of which is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a target may include language key with one or more values that are each a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a target may include language key with one or more values that are each a language code.; Errors: data.target should have required property 'language', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a target may include language key with one or more values that are each a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a target may include language key with one or more values that are each a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:13 Implements **target _creator_ key** with one or more values - [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a target may include creator key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a target may include creator key with one or more values.; Errors: data.target should have required property 'creator', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a target may include creator key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a target may include creator key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:14 Implements **target _type_ key** with one or more values each of which is drawn from the **model's list of resource classes** [model 3.2.1](https://www.w3.org/TR/annotation-model/#targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Target may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Target may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.target should have required property 'type', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Target may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Target may include type key with one or more values that are each drawn from the model's list of resource classes.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:15 Implements **target _processingLanguage_ key** with a **single value** that is a **language code** [model 3.2.1](https://www.w3.org/TR/annotation-model/#targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Target may include processingLanguage key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Target may include processingLanguage key with a single value that is a language code.; Errors: data.target should have required property 'processingLanguage', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Target may include processingLanguage key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Target may include processingLanguage key with a single value that is a language code.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:16 Implements **target _textDirection_ key** with a **single value** that is is **one of ltr, rtl, or auto** [model 3.2.1](https://www.w3.org/TR/annotation-model/#targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Target may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Target may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.target should have required property 'textDirection', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Target may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Target may include textDirection key with a single value that is one of ltr, rtl, or auto.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:17 Implements **target _modified_ key** with a **single value** that is of **format date-time** [model 3.3.1](https://www.w3.org/TR/annotation-model/#lifecycle-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a target may include modified key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a target may include modified key with a single value that is of format date-time.; Errors: data.target should have required property 'modified', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a target may include modified key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a target may include modified key with a single value that is of format date-time.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:18 Implements **target _audience_ key** which has one or more values with each audience instance described using **[schema.org/Audience](http://schema.org/Audience) classes and properties** - [model 3.3.3](https://www.w3.org/TR/annotation-model/#intended-audience)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a target may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a target may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.target should have required property 'audience', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a target may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a target may include audience key which has one or more values with each audience instance described using schema.org/Audience classes and properties.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:19 Implements **target _accessibility_ key** which has one or more values - [model 3.3.4](#https://www.w3.org/TR/annotation-model/#accessibility-of-content)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Target may include accessibility key which has one or more values.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Target may include accessibility key which has one or more values.; Errors: data.target should have required property 'accessibility', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Target may include accessibility key which has one or more values.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Target may include accessibility key which has one or more values.; Errors: data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:20 Implements **target _purpose_ key** with one or more values are each drawn from **model's list of Motivations** [model 3.3.5](https://www.w3.org/TR/annotation-model/#motivation-and-purpose)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Target may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Target may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.target should have required property 'purpose', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Target may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Target may include purpose key with one or more values that are each drawn from model's list of Motivations.; Errors: data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:21 Implements **target _rights_ key** which has one or more values, each of which is a **string of format uri** - [model 3.3.6](https://www.w3.org/TR/annotation-model/#rights-information)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a target may include rights key with one or more values each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a target may include rights key with one or more values each of format uri.; Errors: data.target should have required property 'rights', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a target may include rights key with one or more values each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a target may include rights key with one or more values each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:22 Implements **target _canonical_ key** with a **single value** that is of **format uri** [model 3.3.7](https://www.w3.org/TR/annotation-model/#targets-and-targets)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a target rresource may include canonical key with a single value that is of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a target rresource may include canonical key with a single value that is of format uri.; Errors: data.target should have required property 'canonical', data.target should have required property 'items', data.target.source should be object, data.target.source should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a target rresource may include canonical key with a single value that is of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a target rresource may include canonical key with a single value that is of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:23 Implements **target _via_ key** which has one or more values, each of which is a **string of format uri** - [model 3.3.7](https://www.w3.org/TR/annotation-model/#other-identities)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a target resource may include via key with one or more values that are each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a target resource may include via key with one or more values that are each of format uri.; Errors: data.target should have required property 'via', data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a target resource may include via key with one or more values that are each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a target resource may include via key with one or more values that are each of format uri.; Errors: data.target should be object, data.target should be object, data.target should NOT be valid, data.target should be object, data.target should be object, data.target should be object, data.target should match exactly one schema in oneOf, data.target should be object, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:24 Implements **Specific Resource target _styleClass_ key** which has one or more values - [model 4.4](https://www.w3.org/TR/annotation-model/#styles)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Specific Resource target  may include styleClass key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Specific Resource target  may include styleClass key with one or more values.; Errors: data.target should have required property 'styleClass', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Specific Resource target  may include styleClass key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Specific Resource target  may include styleClass key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        },
        "1:25 Implements **Specific Resource target _renderedVia_ key** which has one or more values - [model 4.5](https://www.w3.org/TR/annotation-model/#rendering-software)": {
          "byUA": {
            "EM01": "FAIL",
            "IC01": "FAIL",
            "MO01": "FAIL",
            "MO02": "FAIL"
          },
          "UAmessage": {
            "EM01": "assert_true: INFORMATIONAL: The description of a Specific Resource target  may include renderedVia key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "IC01": "assert_true: INFORMATIONAL: The description of a Specific Resource target  may include renderedVia key with one or more values.; Errors: data.target should have required property 'renderedVia', data.target should have required property 'items', data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO01": "assert_true: INFORMATIONAL: The description of a Specific Resource target  may include renderedVia key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false",
            "MO02": "assert_true: INFORMATIONAL: The description of a Specific Resource target  may include renderedVia key with one or more values.; Errors: data.target should be object, data.target should be object, data.target should be object, data.target should match some schema in anyOf, data.target should NOT be valid, data.target should match exactly one schema in oneOf; expected true got false"
          },
          "totals": {
            "FAIL": 4
          }
        }
      }
    }
  }
}