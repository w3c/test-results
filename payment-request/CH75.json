{"run_info": {"product": "chrome", "bits": 64, "has_sandbox": true, "verify": false, "os_version": "10.14", "browser_version": "75.0.3747.0 canary", "version": "OS X 10.14.3", "wasm": false, "debug": false, "os": "mac", "processor": "x86_64", "revision": "c6b4c117ceb0f89201188d017d6ba4b1e6cf1262"}, "time_start": 1553809044912, "time_end": 1553809159078, "results": [{"test": "/payment-request/payment-request-hasenrolledinstrument-method-protection.tentative.https.html", "status": "OK", "message": null, "duration": 824, "subtests": [{"status": "PASS", "message": null, "name": "Optionally, at the user agent's discretion, return a promise rejected with a \"NotAllowedError\" DOMException."}]}, {"test": "/payment-request/allowpaymentrequest/basic.https.html", "status": "OK", "message": null, "duration": 523, "subtests": [{"status": "PASS", "message": null, "name": "PaymentRequest <iframe allowpaymentrequest> basic"}]}, {"test": "/payment-request/payment-request-ctor-pmi-handling.https.html", "status": "OK", "message": null, "duration": 674, "subtests": [{"status": "PASS", "message": null, "name": "Must support valid standard URL PMIs"}, {"status": "PASS", "message": null, "name": "Must not throw on syntactically valid standardized payment method identifiers, even if they are not supported"}, {"status": "PASS", "message": null, "name": "Must throw on syntactically invalid standardized payment method identifiers"}, {"status": "PASS", "message": null, "name": "Constructor MUST throw if given an invalid URL-based payment method identifier"}]}, {"test": "/payment-request/MerchantValidationEvent/constructor.http.html", "status": "OK", "message": null, "duration": 687, "subtests": [{"status": "PASS", "message": null, "name": "MerchantValidationEvent constructor must not be exposed in insecure context"}]}, {"test": "/payment-request/payment-request-canmakepayment-method.https.html", "status": "OK", "message": null, "duration": 1685, "subtests": [{"status": "PASS", "message": null, "name": "If payment method identifier are supported, resolve promise with true."}, {"status": "PASS", "message": null, "name": "If request.[[state]] is \"created\", then return a promise that resolves to true for known method."}, {"status": "PASS", "message": null, "name": "All methods are unsupported"}, {"status": "PASS", "message": null, "name": "Mix of supported and unsupported methods, at least one method is supported."}, {"status": "PASS", "message": null, "name": "If request.[[state]] is \"interactive\", then return a promise rejected with an \"InvalidStateError\" DOMException."}, {"status": "FAIL", "expected": "PASS", "message": "promise_test: Unhandled rejection with value: object \"AbortError: Request cancelled\"", "name": "If request.[[state]] is \"closed\", then return a promise rejected with an \"InvalidStateError\" DOMException."}]}, {"test": "/payment-request/allowpaymentrequest/active-document-cross-origin.https.sub.html", "status": "OK", "message": null, "duration": 775, "subtests": [{"status": "PASS", "message": null, "name": "PaymentRequest <iframe allowpaymentrequest> in non-active document (cross-origin)"}]}, {"test": "/payment-request/idlharness.https.window.html", "status": "OK", "message": null, "duration": 633, "subtests": [{"status": "PASS", "message": null, "name": "idl_test setup"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: existence and properties of interface object"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface object length"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface object name"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: existence and properties of interface prototype object"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: existence and properties of interface prototype object's \"constructor\" property"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: existence and properties of interface prototype object's @@unscopables property"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: operation show([object Object])"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: operation abort()"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: operation canMakePayment()"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: attribute id"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: attribute shippingAddress"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: attribute shippingOption"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: attribute shippingType"}, {"status": "FAIL", "expected": "PASS", "message": "assert_true: The prototype object must have a property \"onmerchantvalidation\" expected true got false", "name": "PaymentRequest interface: attribute onmerchantvalidation"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: attribute onshippingaddresschange"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: attribute onshippingoptionchange"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: attribute onpaymentmethodchange"}, {"status": "PASS", "message": null, "name": "PaymentRequest must be primary interface of paymentRequest"}, {"status": "PASS", "message": null, "name": "Stringification of paymentRequest"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: paymentRequest must inherit property \"show([object Object])\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: calling show([object Object]) on paymentRequest with too few arguments must throw TypeError"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: paymentRequest must inherit property \"abort()\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: paymentRequest must inherit property \"canMakePayment()\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: paymentRequest must inherit property \"id\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: paymentRequest must inherit property \"shippingAddress\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: paymentRequest must inherit property \"shippingOption\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: paymentRequest must inherit property \"shippingType\" with the proper type"}, {"status": "FAIL", "expected": "PASS", "message": "assert_inherits: property \"onmerchantvalidation\" not found in prototype chain", "name": "PaymentRequest interface: paymentRequest must inherit property \"onmerchantvalidation\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: paymentRequest must inherit property \"onshippingaddresschange\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: paymentRequest must inherit property \"onshippingoptionchange\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequest interface: paymentRequest must inherit property \"onpaymentmethodchange\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: existence and properties of interface object"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface object length"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface object name"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: existence and properties of interface prototype object"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: existence and properties of interface prototype object's \"constructor\" property"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: existence and properties of interface prototype object's @@unscopables property"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: operation toJSON()"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: attribute city"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: attribute country"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: attribute dependentLocality"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: attribute organization"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: attribute phone"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: attribute postalCode"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: attribute recipient"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: attribute region"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: attribute sortingCode"}, {"status": "PASS", "message": null, "name": "PaymentAddress interface: attribute addressLine"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: existence and properties of interface object"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface object length"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface object name"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: existence and properties of interface prototype object"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: existence and properties of interface prototype object's \"constructor\" property"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: existence and properties of interface prototype object's @@unscopables property"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: operation toJSON()"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: attribute requestId"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: attribute methodName"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: attribute details"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: attribute shippingAddress"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: attribute shippingOption"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: attribute payerName"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: attribute payerEmail"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: attribute payerPhone"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: operation complete(PaymentComplete)"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: operation retry(PaymentValidationErrors)"}, {"status": "PASS", "message": null, "name": "PaymentResponse interface: attribute onpayerdetailchange"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface: existence and properties of interface object"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface object length"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface object name"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface: existence and properties of interface prototype object"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface: existence and properties of interface prototype object's \"constructor\" property"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface: existence and properties of interface prototype object's @@unscopables property"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface: attribute methodName"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface: attribute validationURL"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface: operation complete([object Object])"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent must be primary interface of new MerchantValidationEvent(\"merchantvalidation\")"}, {"status": "PASS", "message": null, "name": "Stringification of new MerchantValidationEvent(\"merchantvalidation\")"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface: new MerchantValidationEvent(\"merchantvalidation\") must inherit property \"methodName\" with the proper type"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface: new MerchantValidationEvent(\"merchantvalidation\") must inherit property \"validationURL\" with the proper type"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface: new MerchantValidationEvent(\"merchantvalidation\") must inherit property \"complete([object Object])\" with the proper type"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent interface: calling complete([object Object]) on new MerchantValidationEvent(\"merchantvalidation\") with too few arguments must throw TypeError"}, {"status": "PASS", "message": null, "name": "PaymentMethodChangeEvent interface: existence and properties of interface object"}, {"status": "PASS", "message": null, "name": "PaymentMethodChangeEvent interface object length"}, {"status": "PASS", "message": null, "name": "PaymentMethodChangeEvent interface object name"}, {"status": "PASS", "message": null, "name": "PaymentMethodChangeEvent interface: existence and properties of interface prototype object"}, {"status": "PASS", "message": null, "name": "PaymentMethodChangeEvent interface: existence and properties of interface prototype object's \"constructor\" property"}, {"status": "PASS", "message": null, "name": "PaymentMethodChangeEvent interface: existence and properties of interface prototype object's @@unscopables property"}, {"status": "PASS", "message": null, "name": "PaymentMethodChangeEvent interface: attribute methodName"}, {"status": "PASS", "message": null, "name": "PaymentMethodChangeEvent interface: attribute methodDetails"}, {"status": "PASS", "message": null, "name": "PaymentMethodChangeEvent must be primary interface of new PaymentMethodChangeEvent(\"paymentmethodchange\")"}, {"status": "PASS", "message": null, "name": "Stringification of new PaymentMethodChangeEvent(\"paymentmethodchange\")"}, {"status": "PASS", "message": null, "name": "PaymentMethodChangeEvent interface: new PaymentMethodChangeEvent(\"paymentmethodchange\") must inherit property \"methodName\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentMethodChangeEvent interface: new PaymentMethodChangeEvent(\"paymentmethodchange\") must inherit property \"methodDetails\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent interface: new PaymentMethodChangeEvent(\"paymentmethodchange\") must inherit property \"updateWith([object Object])\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent interface: calling updateWith([object Object]) on new PaymentMethodChangeEvent(\"paymentmethodchange\") with too few arguments must throw TypeError"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent interface: existence and properties of interface object"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent interface object length"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent interface object name"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent interface: existence and properties of interface prototype object"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent interface: existence and properties of interface prototype object's \"constructor\" property"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent interface: existence and properties of interface prototype object's @@unscopables property"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent interface: operation updateWith([object Object])"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent must be primary interface of new PaymentRequestUpdateEvent(\"paymentrequestupdate\")"}, {"status": "PASS", "message": null, "name": "Stringification of new PaymentRequestUpdateEvent(\"paymentrequestupdate\")"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent interface: new PaymentRequestUpdateEvent(\"paymentrequestupdate\") must inherit property \"updateWith([object Object])\" with the proper type"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent interface: calling updateWith([object Object]) on new PaymentRequestUpdateEvent(\"paymentrequestupdate\") with too few arguments must throw TypeError"}]}, {"test": "/payment-request/payment-request-shippingType-attribute.https.html", "status": "OK", "message": null, "duration": 472, "subtests": [{"status": "PASS", "message": null, "name": "Must have a shippingType IDL attribute"}, {"status": "PASS", "message": null, "name": "If options.requestShipping is false, then request.shippingType attribute is null."}, {"status": "PASS", "message": null, "name": "If options.requestShipping is true, request.shippingType will be options.shippingType."}]}, {"test": "/payment-request/constructor_convert_method_data.https.html", "status": "OK", "message": null, "duration": 757, "subtests": [{"status": "PASS", "message": null, "name": "Smoke test."}, {"status": "PASS", "message": null, "name": "Tries to convert data member during Payment Request construction, irrespective of PMI."}, {"status": "FAIL", "expected": "PASS", "message": "assert_throws: PaymentMethodData.data is invalid. function \"() => {\n          const badMethod = Object.assign(\n            {},\n            method,\n            /* This is invalid in both Apple Pay and Basic Card */\n            { data: { supportedNetworks: \"this will throw\" } }\n          );\n          new PaymentRequest([badMethod], details);\n        }\" did not throw", "name": "Converts PaymentMethodData's data to mandated IDL type during PaymentRequest construction."}]}, {"test": "/payment-request/payment-request-shippingOption-attribute.https.html", "status": "OK", "message": null, "duration": 472, "subtests": [{"status": "PASS", "message": null, "name": "Must have a .shippingOption IDL attribute."}, {"status": "PASS", "message": null, "name": ".shippingOption attribute must default to null."}, {"status": "PASS", "message": null, "name": "If there is a single shipping option, but selected is false, then .shippingOption must be null."}, {"status": "PASS", "message": null, "name": "If there are multiple shipping options all with `selected` set to false, then .shippingOption is null."}, {"status": "PASS", "message": null, "name": "Given multiple shipping options, it must use the selected shipping option for .shippingOption value."}, {"status": "PASS", "message": null, "name": "If there are multiple of the shipping options with selected true, then .shippingOption is the last selected shipping option in order."}]}, {"status": "TIMEOUT", "expected": "OK", "test": "/payment-request/rejects_if_not_active_manual.https.html", "subtests": [], "duration": 16055, "message": null}, {"status": "ERROR", "expected": "OK", "test": "/payment-request/payment-request-show-method.https.html", "subtests": [{"status": "TIMEOUT", "expected": "PASS", "message": "Test timed out", "name": "Calling show() without being triggered by user interaction throws"}, {"status": "FAIL", "expected": "PASS", "message": "promise_test: Unhandled rejection with value: object \"AbortError: Request cancelled\"", "name": "Throws if the promise [[state]] is not 'created'."}, {"status": "FAIL", "expected": "PASS", "message": "promise_test: Unhandled rejection with value: object \"InvalidStateError: No show() or retry() in progress, so nothing to abort\"", "name": "If the user agent's \"payment request is showing\" boolean is true, then return a promise rejected with an \"AbortError\" DOMException."}, {"status": "PASS", "message": null, "name": "If payment method consultation produces no supported method of payment, then return a promise rejected with a \"NotSupportedError\" DOMException."}, {"status": "FAIL", "expected": "PASS", "message": "promise_test: Unhandled rejection with value: object \"AbortError: Request cancelled\"", "name": "Calling show() multiple times always returns a new promise."}], "duration": 2696, "message": "Request cancelled"}, {"test": "/payment-request/payment-request-id-attribute.https.html", "status": "OK", "message": null, "duration": 745, "subtests": [{"status": "PASS", "message": null, "name": "PaymentRequest's id attribute's value can be set via PaymentDetailsInit dictionary"}, {"status": "PASS", "message": null, "name": "PaymentRequest's id attribute must be a UUID when PaymentDetailsInit.id is missing"}]}, {"test": "/payment-request/payment-response/onpayerdetailchange-attribute.https.html", "status": "OK", "message": null, "duration": 706, "subtests": [{"status": "PASS", "message": null, "name": "PaymentResponse inherits from EventTarget"}, {"status": "PASS", "message": null, "name": "PaymentResponse has an onpayerdetailchange in the prototype chain"}]}, {"test": "/payment-request/MerchantValidationEvent/constructor.https.html", "status": "OK", "message": null, "duration": 641, "subtests": [{"status": "PASS", "message": null, "name": "MerchantValidationEvent can be constructed in secure-context."}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent can be constructed with an EventInitDict, even if not trusted."}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent can be dispatched, even if not trusted."}, {"status": "PASS", "message": null, "name": "Must have a validationURL IDL attribute, which is initialized with to the validationURL dictionary value."}, {"status": "PASS", "message": null, "name": "Must throw TypeError if initialized with an invalid URL."}, {"status": "PASS", "message": null, "name": "Relative validationURLs use the document as the base."}, {"status": "PASS", "message": null, "name": "Must have a methodName IDL attribute, which is initialized with to the methodName dictionary value."}, {"status": "PASS", "message": null, "name": "When no methodName is passed, methodName attribute defaults to the empty string"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent can be constructed with valid PMIs"}, {"status": "PASS", "message": null, "name": "MerchantValidationEvent can't be constructed with invalid PMIs"}]}, {"test": "/payment-request/PaymentMethodChangeEvent/methodName-attribute.https.html", "status": "OK", "message": null, "duration": 520, "subtests": [{"status": "PASS", "message": null, "name": "Must have a methodName IDL attribute, which is initialized with to the methodName dictionary value"}, {"status": "PASS", "message": null, "name": "When no dictionary is passed, the methodName member defaults to the empty string"}]}, {"test": "/payment-request/allowpaymentrequest/no-attribute-same-origin-bc-containers.https.html", "status": "OK", "message": null, "duration": 825, "subtests": [{"status": "PASS", "message": null, "name": "iframe"}, {"status": "PASS", "message": null, "name": "frame"}, {"status": "PASS", "message": null, "name": "object"}, {"status": "PASS", "message": null, "name": "embed"}]}, {"test": "/payment-request/payment-request-canmakepayment-method-protection.https.html", "status": "OK", "message": null, "duration": 1582, "subtests": [{"status": "PASS", "message": null, "name": "Optionally, at the user agent's discretion, return a promise rejected with a \"NotAllowedError\" DOMException."}]}, {"test": "/payment-request/PaymentRequestUpdateEvent/constructor.https.html", "status": "OK", "message": null, "duration": 1712, "subtests": [{"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent can be constructed in secure-context"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent can be constructed with an EventInitDict, even if not trusted"}, {"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent can be dispatched, even if not trusted"}]}, {"test": "/payment-request/allowpaymentrequest/no-attribute-cross-origin-bc-containers.https.html", "status": "OK", "message": null, "duration": 673, "subtests": [{"status": "PASS", "message": null, "name": "iframe"}, {"status": "PASS", "message": null, "name": "frame"}, {"status": "PASS", "message": null, "name": "object"}, {"status": "PASS", "message": null, "name": "embed"}]}, {"test": "/payment-request/payment-request-ctor-currency-code-checks.https.html", "status": "OK", "message": null, "duration": 980, "subtests": [{"status": "PASS", "message": null, "name": "Check and canonicalize valid details.total.amount"}, {"status": "PASS", "message": null, "name": "Check and canonicalize invalid details.total.amount and rethrow any exceptions."}, {"status": "PASS", "message": null, "name": "Check and canonicalize valid details.displayItems amount"}, {"status": "PASS", "message": null, "name": "Check and canonicalize invalid details.displayItems amount and rethrow RangeError."}, {"status": "PASS", "message": null, "name": "Check and canonicalize valid details.shippingOptions amount."}, {"status": "PASS", "message": null, "name": "Check and canonicalize invalid details.shippingOptions amount and rethrow RangeError."}, {"status": "PASS", "message": null, "name": "Check and canonicalize valid modifiers[n].total amount."}, {"status": "PASS", "message": null, "name": "Check and canonicalize invalid modifiers[n].total amount and rethrow RangeError."}, {"status": "PASS", "message": null, "name": "Check and canonicalize valid modifiers[n].additionaDisplayItem amount."}, {"status": "PASS", "message": null, "name": "Check and canonicalize invalid modifiers[n].additionaDisplayItem amount and rethrow RangeError."}]}, {"test": "/payment-request/onpaymentmenthodchange-attribute.https.html", "status": "OK", "message": null, "duration": 712, "subtests": [{"status": "PASS", "message": null, "name": "Must have a onpaymentmethodchange IDL attribute"}, {"status": "PASS", "message": null, "name": "onpaymentmethodchange attribute is a generic handler for \"paymentmethodchange\""}, {"status": "PASS", "message": null, "name": "onpaymentmethodchange attribute is a handler for PaymentMethodChangeEvent"}, {"status": "PASS", "message": null, "name": "onpaymentmethodchange attribute and listeners both work"}]}, {"test": "/payment-request/PaymentRequestUpdateEvent/constructor.http.html", "status": "OK", "message": null, "duration": 676, "subtests": [{"status": "PASS", "message": null, "name": "PaymentRequestUpdateEvent constructor must not be exposed in insecure context"}]}, {"test": "/payment-request/allowpaymentrequest/removing-allowpaymentrequest.https.sub.html", "status": "OK", "message": null, "duration": 773, "subtests": [{"status": "FAIL", "expected": "PASS", "message": "assert_array_equals: after navigation lengths differ, expected 3 got 4", "name": "PaymentRequest removing allowpaymentrequest after load and then navigating"}]}, {"status": "TIMEOUT", "expected": "OK", "test": "/payment-request/payment-is-showing.https.html", "subtests": [{"status": "TIMEOUT", "expected": "PASS", "message": "Test timed out", "name": "The top browsing context can only show one payment sheet at a time."}, {"status": "NOTRUN", "expected": "PASS", "message": null, "name": "If an iframe shows a payment request, the top-level browsing context can't also show one."}, {"status": "NOTRUN", "expected": "PASS", "message": null, "name": "An iframe cannot show a payment request if the top-level window is already showing one."}, {"status": "NOTRUN", "expected": "PASS", "message": null, "name": "Using a popup window prevents the top-browsing context from showing a payment request"}, {"status": "NOTRUN", "expected": "PASS", "message": null, "name": "Given multiple nested browsing contexts, and window calls show() first, other nested browsing contexts can't show a request."}, {"status": "NOTRUN", "expected": "PASS", "message": null, "name": "Given multiple nested browsing contexts, and popup calls show() first, other nested browsing contexts can't show a request."}, {"status": "NOTRUN", "expected": "PASS", "message": null, "name": "Given multiple nested browsing contexts, and an iframe calls show() first, other nested browsing contexts can't show a request."}, {"status": "NOTRUN", "expected": "PASS", "message": null, "name": "Navigating an iframe as a nested browsing context sets 'payment request is showing boolean' to false."}, {"status": "NOTRUN", "expected": "PASS", "message": null, "name": "Navigating a popup as a nested browsing context sets 'payment request is showing boolean' to false."}], "duration": 10593, "message": null}, {"status": "TIMEOUT", "expected": "OK", "test": "/payment-request/rejects_if_not_active.https.html", "subtests": [{"status": "TIMEOUT", "expected": "PASS", "message": "Test timed out", "name": "If a payment request is showing, but its document is navigated away (so no longer fully active), the payment request aborts."}], "duration": 10594, "message": null}, {"test": "/payment-request/payment-request-onshippingaddresschange-attribute.https.html", "status": "OK", "message": null, "duration": 522, "subtests": [{"status": "PASS", "message": null, "name": "Must have a onshippingaddresschange IDL attribute"}, {"status": "PASS", "message": null, "name": "onshippingaddresschange attribute is a generic handler for \"shippingaddresschange\""}, {"status": "PASS", "message": null, "name": "onshippingaddresschange attribute is a handler for PaymentRequestUpdateEvent"}, {"status": "PASS", "message": null, "name": "onshippingaddresschange attribute and listeners both work"}]}, {"test": "/payment-request/payment-request-hasenrolledinstrument-method.tentative.https.html", "status": "OK", "message": null, "duration": 875, "subtests": [{"status": "PASS", "message": null, "name": "hasEnrolledInstrument() resolves to false for unsupported payment methods."}, {"status": "PASS", "message": null, "name": "If request.[[state]] is \"interactive\", then return a promise rejected with an \"InvalidStateError\" DOMException."}, {"status": "FAIL", "expected": "PASS", "message": "promise_test: Unhandled rejection with value: object \"AbortError: Request cancelled\"", "name": "If request.[[state]] is \"closed\", then return a promise rejected with an \"InvalidStateError\" DOMException."}]}, {"test": "/payment-request/onmerchantvalidation-attribute.https.html", "status": "OK", "message": null, "duration": 815, "subtests": [{"status": "FAIL", "expected": "PASS", "message": "assert_idl_attribute: property \"onmerchantvalidation\" not found in prototype chain", "name": "Must have a onmerchantvalidation IDL attribute"}, {"status": "FAIL", "expected": "PASS", "message": "assert_true: event did not fire expected true got false", "name": "onmerchantvalidation attribute is a generic handler for \"merchantvalidation\""}, {"status": "FAIL", "expected": "PASS", "message": "assert_true: event did not fire expected true got false", "name": "onmerchantvalidation attribute is a handler for MerchantValidationEvent"}, {"status": "FAIL", "expected": "PASS", "message": "assert_true: onmerchantvalidation must receive the event expected true got false", "name": "onmerchantvalidation attribute and listeners both work"}]}, {"test": "/payment-request/historical.https.html", "status": "OK", "message": null, "duration": 944, "subtests": [{"status": "PASS", "message": null, "name": "paymentRequestID in PaymentRequest"}, {"status": "PASS", "message": null, "name": "paymentRequestID in PaymentResponse"}, {"status": "PASS", "message": null, "name": "careOf in PaymentAddress"}, {"status": "PASS", "message": null, "name": "totalAmount in PaymentResponse"}, {"status": "PASS", "message": null, "name": "paymentRequestId in PaymentRequest"}, {"status": "PASS", "message": null, "name": "paymentRequestId in PaymentResponse"}, {"status": "PASS", "message": null, "name": "languageCode in PaymentAddress"}, {"status": "PASS", "message": null, "name": "regionCode in PaymentAddress"}, {"status": "PASS", "message": null, "name": "supportedMethods must not support sequence<DOMString>"}]}, {"test": "/payment-request/payment-request-insecure.http.html", "status": "OK", "message": null, "duration": 630, "subtests": [{"status": "PASS", "message": null, "name": "PaymentRequest constructor must not be exposed in insecure context"}]}, {"test": "/payment-request/payment-request-onshippingoptionchange-attribute.https.html", "status": "OK", "message": null, "duration": 473, "subtests": [{"status": "PASS", "message": null, "name": "Must have a onshippingoptionchange IDL attribute"}, {"status": "PASS", "message": null, "name": "onshippingoptionchange attribute is a generic handler for \"shippingoptionchange\""}, {"status": "PASS", "message": null, "name": "onshippingoptionchange attribute is a handler for PaymentRequestUpdateEvent"}, {"status": "PASS", "message": null, "name": "onshippingoptionchange attribute and listeners both work"}]}, {"test": "/payment-request/payment-request-shippingAddress-attribute.https.html", "status": "OK", "message": null, "duration": 372, "subtests": [{"status": "PASS", "message": null, "name": "Must have a .shippingAddress IDL attribute."}, {"status": "PASS", "message": null, "name": ".shippingAddress attribute must default to null."}]}, {"test": "/payment-request/PaymentMethodChangeEvent/methodDetails-attribute.https.html", "status": "OK", "message": null, "duration": 522, "subtests": [{"status": "PASS", "message": null, "name": "Must have a methodDetails IDL attribute, which is initialized with to the methodName dictionary value"}, {"status": "PASS", "message": null, "name": "The methodDetails member defaults to null"}]}, {"test": "/payment-request/allowpaymentrequest/active-document-same-origin.https.html", "status": "OK", "message": null, "duration": 624, "subtests": [{"status": "PASS", "message": null, "name": "PaymentRequest <iframe allowpaymentrequest> in non-active document (same-origin)"}]}, {"test": "/payment-request/allowpaymentrequest/setting-allowpaymentrequest.https.sub.html", "status": "OK", "message": null, "duration": 877, "subtests": [{"status": "FAIL", "expected": "PASS", "message": "assert_array_equals: before navigation lengths differ, expected 3 got 4", "name": "PaymentRequest setting allowpaymentrequest after load and then navigating"}]}, {"test": "/payment-request/payment-request-constructor.https.html", "status": "OK", "message": null, "duration": 2698, "subtests": [{"status": "PASS", "message": null, "name": "If details.id is missing, assign an identifier"}, {"status": "PASS", "message": null, "name": "If details.id is missing, assign a unique identifier"}, {"status": "PASS", "message": null, "name": "If the same id is provided, then use it"}, {"status": "PASS", "message": null, "name": "Use ids even if they are strange"}, {"status": "PASS", "message": null, "name": "Use provided request ID"}, {"status": "PASS", "message": null, "name": "If the length of the methodData sequence is zero, then throw a TypeError"}, {"status": "PASS", "message": null, "name": "Modifier method data must be JSON-serializable object"}, {"status": "PASS", "message": null, "name": "Rethrow any exceptions of JSON-serializing paymentMethod.data into a string"}, {"status": "PASS", "message": null, "name": "If details.total.amount.value is not a valid decimal monetary value, then throw a TypeError"}, {"status": "PASS", "message": null, "name": "PaymentDetailsBase members can be 0 length"}, {"status": "PASS", "message": null, "name": "If the first character of details.total.amount.value is U+002D HYPHEN-MINUS, then throw a TypeError"}, {"status": "PASS", "message": null, "name": "For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value, then throw a TypeError"}, {"status": "PASS", "message": null, "name": "Negative values are allowed for displayItems.amount.value, irrespective of total amount"}, {"status": "PASS", "message": null, "name": "it handles high precision currency values without throwing"}, {"status": "PASS", "message": null, "name": "For each option in details.shippingOptions: if option.amount.value is not a valid decimal monetary value, then throw a TypeError"}, {"status": "PASS", "message": null, "name": "If there is no selected shipping option, then PaymentRequest.shippingOption remains null"}, {"status": "PASS", "message": null, "name": "If there is a selected shipping option, and requestShipping is set, then that option becomes synchronously selected"}, {"status": "PASS", "message": null, "name": "If requestShipping is set, and if there is a multiple selected shipping options, only the last is selected."}, {"status": "PASS", "message": null, "name": "If there are any duplicate shipping option ids, and shipping is requested, then throw a TypeError"}, {"status": "PASS", "message": null, "name": "Throw when there are duplicate shippingOption ids, even if other values are different"}, {"status": "PASS", "message": null, "name": "Throw TypeError if modifier.total.amount.value is not a valid decimal monetary value"}, {"status": "PASS", "message": null, "name": "If amount.value of additionalDisplayItems is not a valid decimal monetary value, then throw a TypeError"}, {"status": "PASS", "message": null, "name": "Modifier data must be JSON-serializable object (an Array in this case)"}, {"status": "PASS", "message": null, "name": "Modifier data must be JSON-serializable object (an Object in this case)"}, {"status": "PASS", "message": null, "name": "Rethrow any exceptions of JSON-serializing modifier.data"}, {"status": "PASS", "message": null, "name": "Shipping type should be valid"}, {"status": "PASS", "message": null, "name": "PaymentRequest.shippingAddress must initially be null"}, {"status": "PASS", "message": null, "name": "If options.requestShipping is not set, then request.shippingType attribute is null."}, {"status": "PASS", "message": null, "name": "If options.requestShipping is true, request.shippingType will be options.shippingType."}]}, {"test": "/payment-request/allowpaymentrequest/setting-allowpaymentrequest-timing.https.sub.html", "status": "OK", "message": null, "duration": 3735, "subtests": [{"status": "FAIL", "expected": "PASS", "message": "assert_array_equals: lengths differ, expected 3 got 4", "name": "PaymentRequest setting allowpaymentrequest after document creation, before response"}]}, {"test": "/payment-request/allowpaymentrequest/allowpaymentrequest-attribute-cross-origin-bc-containers.https.html", "status": "OK", "message": null, "duration": 777, "subtests": [{"status": "PASS", "message": null, "name": "iframe"}, {"status": "PASS", "message": null, "name": "frame"}, {"status": "PASS", "message": null, "name": "object"}, {"status": "PASS", "message": null, "name": "embed"}]}, {"test": "/payment-request/payment-request-not-exposed.https.worker.html", "status": "OK", "message": null, "duration": 580, "subtests": [{"status": "PASS", "message": null, "name": "PaymentRequest constructor must not be exposed in worker global scope"}]}, {"test": "/payment-request/payment-request-constructor-crash.https.html", "status": "OK", "message": null, "duration": 1419, "subtests": [{"status": "PASS", "message": null, "name": "Don't crash if there is an abusive number of payment methods in the methodData sequence"}, {"status": "PASS", "message": null, "name": "Don't crash if PaymentMethodData.supportedMethods is an abusive length"}, {"status": "PASS", "message": null, "name": "Don't crash if the request id has an abusive length"}, {"status": "PASS", "message": null, "name": "Don't crash if PaymentDetailsInit.total.label is an abusive length"}, {"status": "PASS", "message": null, "name": "Don't crash if total.amount.value is an abusive length"}, {"status": "PASS", "message": null, "name": "Don't crash if details.displayItems has an abusive number of items"}, {"status": "PASS", "message": null, "name": "Don't crash if details.shippingOptions has an abusive number of items"}, {"status": "PASS", "message": null, "name": "Don't crash if PaymentShippingOptions.label is an abusive length"}, {"status": "PASS", "message": null, "name": "Don't crash if the PaymentShippingOptions.amount.value is an abusive length"}, {"status": "PASS", "message": null, "name": "Don't crash if PaymentItem.label is an abusive length"}]}, {"test": "/payment-request/allowpaymentrequest/allowpaymentrequest-attribute-same-origin-bc-containers.https.html", "status": "OK", "message": null, "duration": 884, "subtests": [{"status": "PASS", "message": null, "name": "iframe"}, {"status": "PASS", "message": null, "name": "frame"}, {"status": "PASS", "message": null, "name": "object"}, {"status": "PASS", "message": null, "name": "embed"}]}, {"test": "/payment-request/PaymentRequestUpdateEvent/updatewith-method.https.html", "status": "OK", "message": null, "duration": 522, "subtests": [{"status": "PASS", "message": null, "name": "Let target be the request which is dispatching the event."}, {"status": "PASS", "message": null, "name": "Calling .updateWith() with an undispatched untrusted event throws \"InvalidStateError\""}, {"status": "PASS", "message": null, "name": "Calling .updateWith() with a dispatched, untrusted event, throws \"InvalidStateError\""}]}, {"test": "/payment-request/payment-request-abort-method.https.html", "status": "OK", "message": null, "duration": 1241, "subtests": [{"status": "PASS", "message": null, "name": "Throws if the promise [[state]] is not \"interactive\""}, {"status": "PASS", "message": null, "name": "Calling abort() multiple times is always a new object."}, {"status": "PASS", "message": null, "name": "The same request cannot be shown multiple times."}, {"status": "PASS", "message": null, "name": "Aborting a request before it is shown doesn't prevent it from being shown later."}]}, {"test": "/payment-request/MerchantValidationEvent/complete-method.https.html", "status": "OK", "message": null, "duration": 705, "subtests": [{"status": "PASS", "message": null, "name": "If event's isTrusted attribute is false, then then throw an InvalidStateError DOMException."}]}]}