{
  "results": [
    {
      "test": "/battery-status/battery-charging-manual.https.html",
      "subtests": [
        {
          "name": "Battery Test: battery neither empty or full, charger plugged in",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-discharging-manual.https.html",
      "subtests": [
        {
          "name": "Battery Test: battery neither empty or full, charger unplugged in",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-full-manual.https.html",
      "subtests": [
        {
          "name": "Battery Test: battery full, charger plugged in",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-iframe.https.html",
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "throw a 'SecurityError' when invoking navigator.getBattery() within iframe"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-insecure-context.html",
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "navigator.getBattery() shall throw a 'SecurityError' in an insecure context"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-interface-idlharness.https.html",
      "subtests": [
        {
          "name": "Battery test: IDL",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Navigator interface: operation getBattery()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Navigator must be primary interface of navigator",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of navigator",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Navigator interface: navigator must inherit property \"getBattery\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute charging",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute chargingTime",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute dischargingTime",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute level",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute onchargingchange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute onchargingtimechange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute ondischargingtimechange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: attribute onlevelchange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"charging\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"chargingTime\" with the proper type (1)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"dischargingTime\" with the proper type (2)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"level\" with the proper type (3)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"onchargingchange\" with the proper type (4)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"onchargingtimechange\" with the proper type (5)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"ondischargingtimechange\" with the proper type (6)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "BatteryManager interface: manager must inherit property \"onlevelchange\" with the proper type (7)",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-plugging-in-manual.https.html",
      "subtests": [
        {
          "name": "When the device is plugged in and its charging state is updated, must set the charging attribute's value to true and fire a chargingchange event.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "When the device is plugged in and its charging time is updated, must set the chargingTime attribute's value and fire a chargingtimechange event.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "When the device is plugged in and its discharging time is updated, must set the dischargingTime attribute's value to Infinity and fire a dischargingtimechange event.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "When the device is plugged in and the battery level is updated, must set the level attribute's value and fire a levelchange event.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-promise.https.html",
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "navigator.getBattery() shall return BatteryManager as a promise"
        },
        {
          "status": "PASS",
          "message": null,
          "name": "navigator.getBattery() shall always return the same promise"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-promise-window.https.html",
      "subtests": [
        {
          "status": "PASS",
          "message": null,
          "name": "window.open() makes a different Navigator object thus getting another battery promise"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/battery-status/battery-unplugging-manual.https.html",
      "subtests": [
        {
          "name": "When the device is unplugged in and its charging state is updated, must set the charging attribute's value to false and fire a chargingchange event.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "When the device is unplugged in and its charging time is updated, must set the chargingTime attribute's value to Infinity and fire a chargingtimechange event.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "When the device is unplugged in and its discharging time is updated, must set the dischargingTime attribute's value and fire a dischargingtimechange event.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "When the device is plugged in and the battery level is updated, must set the level attribute's value and fire a levelchange event.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    }
  ]
}
