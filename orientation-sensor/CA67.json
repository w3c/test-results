{
  "results": [
    {
      "test": "/orientation-sensor/AbsoluteOrientationSensor-disabled-by-feature-policy.https.html",
      "subtests": [
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy header accelerometer 'none';gyroscope 'none';magnetometer 'none' disallows the top-level document.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy header accelerometer 'none';gyroscope 'none';magnetometer 'none' disallows same-origin iframes.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy header accelerometer 'none';gyroscope 'none';magnetometer 'none' disallows cross-origin iframes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/AbsoluteOrientationSensor-enabled-by-feature-policy-attribute-redirect-on-load.https.html",
      "subtests": [
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy allow='accelerometer gyroscope magnetometer' attribute allows same-origin relocation",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy allow='accelerometer gyroscope magnetometer' attribute disallows cross-origin relocation",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/AbsoluteOrientationSensor-enabled-by-feature-policy-attribute.https.html",
      "subtests": [
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy allow='accelerometer gyroscope magnetometer' attribute allows same-origin iframe",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy allow='accelerometer gyroscope magnetometer' attribute allows cross-origin iframe",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/AbsoluteOrientationSensor-enabled-by-feature-policy.https.html",
      "subtests": [
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy header accelerometer *;gyroscope *;magnetometer * allows the top-level document.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy header accelerometer *;gyroscope *;magnetometer * allows same-origin iframes.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy header accelerometer *;gyroscope *;magnetometer * allows cross-origin iframes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/AbsoluteOrientationSensor-enabled-on-self-origin-by-feature-policy.https.html",
      "subtests": [
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy header accelerometer 'self';gyroscope 'self';magnetometer 'self' allows the top-level document.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy header accelerometer 'self';gyroscope 'self';magnetometer 'self' allows same-origin iframes.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: Feature-Policy header accelerometer 'self';gyroscope 'self';magnetometer 'self' disallows cross-origin iframes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/OrientationSensor.https.html",
      "subtests": [
        {
          "name": "Test AbsoluteOrientationSensor.quaternion return a four-element FrozenArray.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test RelativeOrientationSensor.quaternion return a four-element FrozenArray.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test AbsoluteOrientationSensor.populateMatrix() method works correctly.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Test RelativeOrientationSensor.populateMatrix() method works correctly.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: Test that 'onreading' is called and sensor reading is valid",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: sensor reading is correct",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: sensor timestamp is updated when time passes",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: Test that sensor can be successfully created and its states are correct.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: sensor.start() returns undefined",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: no exception is thrown when calling start() on already started sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: sensor.stop() returns undefined",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: no exception is thrown when calling stop() on already stopped sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: Test that fresh reading is fetched on start()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: sensor readings can not be fired on the background tab",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: frequency hint works",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: sensor receives suspend / resume notifications when  cross-origin subframe is focused",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: throw 'NotSupportedError' for an unsupported sensor option",
          "status": "FAIL",
          "message": "assert_throws: function \"() => { new sensorType({invalid: 1}) }\" did not throw"
        },
        {
          "name": "AbsoluteOrientationSensor: throw 'TypeError' if frequency is invalid",
          "status": "FAIL",
          "message": "assert_throws: when freq is undefined function \"() => { new sensorType({frequency: freq}) }\" did not throw"
        },
        {
          "name": "AbsoluteOrientationSensor: sensor reading is correct when options.referenceFrame is 'screen'",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor: throw 'TypeError' if referenceFrame is not one of enumeration values",
          "status": "FAIL",
          "message": "assert_throws: when refFrame is invalid function \"() => { new sensorType({referenceFrame: refFrame}) }\" did not throw"
        },
        {
          "name": "RelativeOrientationSensor: Test that 'onreading' is called and sensor reading is valid",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: sensor reading is correct",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: sensor timestamp is updated when time passes",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: Test that sensor can be successfully created and its states are correct.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: sensor.start() returns undefined",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: no exception is thrown when calling start() on already started sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: sensor.stop() returns undefined",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: no exception is thrown when calling stop() on already stopped sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: Test that fresh reading is fetched on start()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: sensor readings can not be fired on the background tab",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: frequency hint works",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: sensor receives suspend / resume notifications when  cross-origin subframe is focused",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: throw 'NotSupportedError' for an unsupported sensor option",
          "status": "FAIL",
          "message": "assert_throws: function \"() => { new sensorType({invalid: 1}) }\" did not throw"
        },
        {
          "name": "RelativeOrientationSensor: throw 'TypeError' if frequency is invalid",
          "status": "FAIL",
          "message": "assert_throws: when freq is undefined function \"() => { new sensorType({frequency: freq}) }\" did not throw"
        },
        {
          "name": "RelativeOrientationSensor: sensor reading is correct when options.referenceFrame is 'screen'",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: throw 'TypeError' if referenceFrame is not one of enumeration values",
          "status": "FAIL",
          "message": "assert_throws: when refFrame is invalid function \"() => { new sensorType({referenceFrame: refFrame}) }\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/OrientationSensor_insecure_context.html",
      "subtests": [
        {
          "name": "AbsoluteOrientationSensor is not exposed in an insecure context",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor is not exposed in an insecure context",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/RelativeOrientationSensor-disabled-by-feature-policy.https.html",
      "subtests": [
        {
          "name": "RelativeOrientationSensor: Feature-Policy header accelerometer 'none';gyroscope 'none' disallows the top-level document.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: Feature-Policy header accelerometer 'none';gyroscope 'none' disallows same-origin iframes.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: Feature-Policy header accelerometer 'none';gyroscope 'none' disallows cross-origin iframes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/RelativeOrientationSensor-enabled-by-feature-policy-attribute-redirect-on-load.https.html",
      "subtests": [
        {
          "name": "RelativeOrientationSensor: Feature-Policy allow='accelerometer gyroscope' attribute allows same-origin relocation",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: Feature-Policy allow='accelerometer gyroscope' attribute disallows cross-origin relocation",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/RelativeOrientationSensor-enabled-by-feature-policy-attribute.https.html",
      "subtests": [
        {
          "name": "RelativeOrientationSensor: Feature-Policy allow='accelerometer gyroscope' attribute allows same-origin iframe",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: Feature-Policy allow='accelerometer gyroscope' attribute allows cross-origin iframe",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/RelativeOrientationSensor-enabled-by-feature-policy.https.html",
      "subtests": [
        {
          "name": "RelativeOrientationSensor: Feature-Policy header accelerometer *;gyroscope * allows the top-level document.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: Feature-Policy header accelerometer *;gyroscope * allows same-origin iframes.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: Feature-Policy header accelerometer *;gyroscope * allows cross-origin iframes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/RelativeOrientationSensor-enabled-on-self-origin-by-feature-policy.https.html",
      "subtests": [
        {
          "name": "RelativeOrientationSensor: Feature-Policy header accelerometer 'self';gyroscope 'self' allows the top-level document.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: Feature-Policy header accelerometer 'self';gyroscope 'self' allows same-origin iframes.",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: Feature-Policy header accelerometer 'self';gyroscope 'self' disallows cross-origin iframes.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/idlharness.https.html",
      "subtests": [
        {
          "name": "Test IDL implementation of Orientation Sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: existence and properties of interface prototype object's @@unscopables property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: attribute activated",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Unscopable handled correctly for activated property on Sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: attribute hasReading",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Unscopable handled correctly for hasReading property on Sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: attribute timestamp",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Unscopable handled correctly for timestamp property on Sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: operation start()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Unscopable handled correctly for start() on Sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: operation stop()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Unscopable handled correctly for stop() on Sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: attribute onreading",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Unscopable handled correctly for onreading property on Sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: attribute onactivate",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Unscopable handled correctly for onactivate property on Sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: attribute onerror",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Unscopable handled correctly for onerror property on Sensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: existence and properties of interface prototype object's @@unscopables property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: attribute quaternion",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Unscopable handled correctly for quaternion property on OrientationSensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: operation populateMatrix(RotationMatrixType)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Unscopable handled correctly for populateMatrix(RotationMatrixType) on OrientationSensor",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor interface: existence and properties of interface prototype object's @@unscopables property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "AbsoluteOrientationSensor must be primary interface of new AbsoluteOrientationSensor();",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of new AbsoluteOrientationSensor();",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: new AbsoluteOrientationSensor(); must inherit property \"quaternion\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: new AbsoluteOrientationSensor(); must inherit property \"populateMatrix(RotationMatrixType)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: calling populateMatrix(RotationMatrixType) on new AbsoluteOrientationSensor(); with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new AbsoluteOrientationSensor(); must inherit property \"activated\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new AbsoluteOrientationSensor(); must inherit property \"hasReading\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new AbsoluteOrientationSensor(); must inherit property \"timestamp\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new AbsoluteOrientationSensor(); must inherit property \"start()\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new AbsoluteOrientationSensor(); must inherit property \"stop()\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new AbsoluteOrientationSensor(); must inherit property \"onreading\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new AbsoluteOrientationSensor(); must inherit property \"onactivate\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new AbsoluteOrientationSensor(); must inherit property \"onerror\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor interface: existence and properties of interface prototype object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor interface: existence and properties of interface prototype object's @@unscopables property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor must be primary interface of new RelativeOrientationSensor();",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Stringification of new RelativeOrientationSensor();",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: new RelativeOrientationSensor(); must inherit property \"quaternion\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: new RelativeOrientationSensor(); must inherit property \"populateMatrix(RotationMatrixType)\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "OrientationSensor interface: calling populateMatrix(RotationMatrixType) on new RelativeOrientationSensor(); with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new RelativeOrientationSensor(); must inherit property \"activated\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new RelativeOrientationSensor(); must inherit property \"hasReading\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new RelativeOrientationSensor(); must inherit property \"timestamp\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new RelativeOrientationSensor(); must inherit property \"start()\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new RelativeOrientationSensor(); must inherit property \"stop()\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new RelativeOrientationSensor(); must inherit property \"onreading\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new RelativeOrientationSensor(); must inherit property \"onactivate\" with the proper type",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Sensor interface: new RelativeOrientationSensor(); must inherit property \"onerror\" with the proper type",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/orientation-sensor/OrientationSensor_onerror-manual.https.html",
      "subtests": [
        {
          "name": "AbsoluteOrientationSensor: 'onerror' event is fired when sensor is not supported",
          "status": "PASS",
          "message": null
        },
        {
          "name": "RelativeOrientationSensor: 'onerror' event is fired when sensor is not supported",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    }
  ]
}